/*
//Green Lantern
// Make sure the cooldown period is longer than the shield existance time.

greenlantern_level 6
greenlantern_cooldown 30 //Cooldown between each use
greenlantern_existance 5 //Shield existance
*/

/*
*   Green Lantern's Shield
*		Thanx to vittu's cooldown kd as base and AssKicR's spawn infront code.
*/

#include <amxmodx>
#include <engine>
#include <fakemeta>
#include <superheromod>

new gHeroName[]="Green Lantern"
new bool:gHasGreenPower[SH_MAXSLOTS+1]
new bool:gBlockKeyup[SH_MAXSLOTS+1]
new gLastWeapon[SH_MAXSLOTS+1]
new gLanternShield[SH_MAXSLOTS+1]
//new Beam
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Green Lantern", "1.0", "Yang")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("greenlantern_level", "6")
	register_cvar("greenlantern_cooldown", "10")
	register_cvar("greenlantern_existance","5.0")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(gHeroName, "Lantern Shield", "Protect you from projectile attacks.", true, "greenlantern_level")

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// INIT
	register_srvcmd("greenlantern_init", "greenlantern_init")
	shRegHeroInit(gHeroName, "greenlantern_init")

	register_concmd("shield", "create_shield")
	register_event("ResetHUD", "newSpawn", "b")

	//KEY DOWN
	register_srvcmd("greenlantern_kd", "greenlantern_kd")
	shRegKeyDown(gHeroName, "greenlantern_kd")

	//KEY UP
	register_srvcmd("greenlantern_ku", "greenlantern_ku")
	shRegKeyUp(gHeroName, "greenlantern_ku")
}
//----------------------------------------------------------------------------------------------
public greenlantern_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	// 2nd Argument is 0 or 1 depending on whether the id has the hero
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)

	//Sets this variable to the current status
	gHasGreenPower[id] = (hasPowers != 0)
}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYDOWN
public greenlantern_kd()
{
	if ( !hasRoundStarted() ) return

	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if ( !is_user_alive(id) || !gHasGreenPower[id] ) return

	if ( gPlayerUltimateUsed[id] ) {
		playSoundDenySelect(id)
		gBlockKeyup[id] = true
		return
	}

	gBlockKeyup[id] = false

	// Remember this weapon...
	new clip, ammo, weaponID = get_user_weapon(id, clip, ammo)
	gLastWeapon[id] = weaponID

	// switch to knife
	engclient_cmd(id, "weapon_knife")

	create_shield(id)
	if (get_cvar_float("greenlantern_cooldown") > 0.0) ultimateTimer(id, get_cvar_float("greenlantern_cooldown"))
}
//----------------------------------------------------------------------------------------------
public greenlantern_ku()
{
	if ( !hasRoundStarted() ) return

	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if ( !is_user_alive(id) || !gHasGreenPower[id] || gBlockKeyup[id] ) return

	// Switch back to previous weapon...
	// Use keyup since if called too fast CurWeapon functions may be bypassed
	if (gLastWeapon[id] != CSW_KNIFE) shSwitchWeaponID(id, gLastWeapon[id])
}

//----------------------------------------------------------------------------------------------
public create_shield(id) {
	gLanternShield[id] = create_entity("func_breakable")
	entity_set_string(gLanternShield[id], EV_SZ_classname, "gl_shield")
	entity_set_model(gLanternShield[id], "models/shmod/wall.mdl") // I found it somewhere in the forums
	// Set size and absmin+absmax values
	new Float:mins[3]
	new Float:maxs[3]
	mins[0] = -90.0
	mins[1] = -10.0
	mins[2] = -20.0
	maxs[0] = 90.0
	maxs[1] = 10.0
	maxs[2] = 75.0
	entity_set_vector(gLanternShield[id], EV_VEC_mins, mins)
	entity_set_vector(gLanternShield[id], EV_VEC_maxs, maxs)
	entity_set_vector(gLanternShield[id], EV_VEC_absmin, mins)
	entity_set_vector(gLanternShield[id], EV_VEC_absmax, maxs)
	new Float:glowColor[3] = {0.0, 255.0, 0.0}
	entity_set_int(gLanternShield[id], EV_INT_renderfx, kRenderFxGlowShell)
	entity_set_vector(gLanternShield[id], EV_VEC_rendercolor, glowColor)
	entity_set_int(gLanternShield[id], EV_INT_rendermode, kRenderTransAlpha)
	entity_set_float(gLanternShield[id], EV_FL_renderamt, 40.0 )
	entity_set_float(gLanternShield[id],EV_FL_health, 5000.0)
	entity_set_float(gLanternShield[id], EV_FL_takedamage, 5000.0)
	// Set angle
	mins[0] = 0.0
	mins[1] = 90.0
	mins[2] = 0.0
	entity_set_vector(gLanternShield[id], EV_VEC_angles, mins)
	// Get user origin
	new Float:someOrigin[3]
	entity_get_vector(id, EV_VEC_origin, someOrigin)
	// You can offset the origin here.
	new offset = 200
	new Float:adjustPos[3]
	velocity_by_aim(id, offset, adjustPos)
	// This prevents the wall from spawning in the current position of the user and make it spawn farther away from the user.
	someOrigin[0] += adjustPos[0]
	someOrigin[1] += adjustPos[1]
	someOrigin[2] += adjustPos[2]
	entity_set_origin(gLanternShield[id], someOrigin)
	// Set other values
	entity_set_int(gLanternShield[id], EV_INT_solid, SOLID_BBOX)
	entity_set_int(gLanternShield[id], EV_INT_movetype, 5)

	new Float:vRetVector[3]
	entity_get_vector(id, EV_VEC_v_angle, vRetVector)
	vRetVector[0]=float(0)
	entity_set_vector(gLanternShield[id], EV_VEC_angles, vRetVector)

	if( ((vRetVector[1]>=45.0) && (vRetVector[1]<=135.0)) || ((vRetVector[1]>=-135.0) && (vRetVector[1]<=-45.0)) )
	{
		entity_set_size(gLanternShield[id], Float:{-90.0,-5.0,-156.0}, Float:{90.0,5.0,156.0} )
	}
	else
	{
		entity_set_size(gLanternShield[id], Float:{-5.0,-90.0,-156.0}, Float:{5.0,90.0,156.0} )
	}
	set_task( get_cvar_float("greenlantern_existance"), "remove_shield", id )
	new parm[1]
	parm[0] = id
	glow_effect(parm)
	set_task(0.1, "glow_effect", 0, parm, 2, "a", 40)
}

//----------------------------------------------------------------------------------------------
public newSpawn(id)
{
	gPlayerUltimateUsed[id] = false
	new remove_shield = find_ent_by_class(-1, "gl_shield")
	while(remove_shield) {
		remove_entity(remove_shield)
		remove_shield = find_ent_by_class(remove_shield, "gl_shield")
	}
}
//----------------------------------------------------------------------------------------------
public remove_shield(id)
{
	remove_entity(gLanternShield[id])
}
//----------------------------------------------------------------------------------------------
public glow_effect(parm[])
{
	new float:vec1[3]
	new id = parm[0]
	get_user_origin(id, vec1, 0)
	message_begin(MSG_ONE, SVC_TEMPENTITY, vec1, id)
	write_byte(27) //TE_DLIGHT  dynamic light, effect world, minor entity effect
	write_coord(vec1[0]) //initial position
	write_coord(vec1[1])
	write_coord(vec1[2])
	write_byte(20) //radius in 10's
	write_byte(5) //color red
	write_byte(220) //color green
	write_byte(5) //color blue
	write_byte(1) //life in 10's
	write_byte(5) //decay rate in 10's
	message_end()
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	precache_model("models/shmod/wall.mdl")
}