#include <amxmod>
#include <superheromod>

// GLOBAL VARIABLES
new gHeroName[]="Tracer"
new bool:gHasTracerPower[SH_MAXSLOTS+1]
new lastammo[33]
new lastweap[33]
#define TE_USERTRACER       127
//----------------------------------------------------------------------------------------------
public plugin_init()
{
  // Plugin Info
  register_plugin("SUPERHERO Tracer","1.2","Prowler")

  // DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
  register_cvar("tracer_level", "4" )

  // FIRE THE EVENT TO CREATE THIS SUPERHERO!
  shCreateHero(gHeroName, "Tracer Fire", "You can see Weapon Tracers", false, "tracer_level" )

  // REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)

  // INIT
  register_srvcmd("tracer_init", "tracer_init")
  register_event("CurWeapon", "make_tracer", "be", "1=1", "3>0")
  shRegHeroInit(gHeroName, "tracer_init")
}
//----------------------------------------------------------------------------------------------
public tracer_init()
{
  new temp[6]

  // First Argument is an id
  read_argv(1,temp,5)
  new id=str_to_num(temp)
  read_argv(2,temp,5)
  new hasPower=str_to_num(temp)  // !0 = has tracer power

  if ( hasPower != 0 )
    gHasTracerPower[id]=true
  else
    gHasTracerPower[id]=false
}
//----------------------------------------------------------------------------------------------
public make_tracer(id)
{
    new weap = read_data(2)   // id of the weapon
    new ammo = read_data(3)   // ammo left in clip
    new pteam[16]
    new players[32]
    new i, n
    get_user_team(id, pteam, 15)
    if (lastweap[id] == 0) lastweap[id] = weap
    if ((lastammo[id] > ammo) && (lastweap[id] == weap)) {

  get_players(players, n, "c")
  new vec[3]
  new aimvec[3]
  new velocityvec[3]
  new length
  new speed = 2400
  get_user_origin(id,vec)
  get_user_origin(id,aimvec,4)
  vec[2] -= 6
  velocityvec[0]=aimvec[0]-vec[0]
  velocityvec[1]=aimvec[1]-vec[1]
  velocityvec[2]=aimvec[2]-vec[2]
  length=sqrt(velocityvec[0]*velocityvec[0]+velocityvec[1]*velocityvec[1]+velocityvec[2]*velocityvec[2])
  velocityvec[0]=velocityvec[0]*speed/length
  velocityvec[1]=velocityvec[1]*speed/length
  velocityvec[2]=velocityvec[2]*speed/length

  for(i = 0; i < n; i++)
        if ((is_user_connected(players[i])) && (gHasTracerPower[players[i]]==true))
          draw_tracer_for(players[i], pteam, vec , velocityvec)
      }
    lastammo[id] = ammo
    lastweap[id] = weap
    return PLUGIN_CONTINUE
 }
//----------------------------------------------------------------------------------------------
public draw_tracer_for(pl, pteam[], vec[3], velocityvec[3])
{
        message_begin(MSG_ONE, SVC_TEMPENTITY, vec, pl)
        write_byte(TE_USERTRACER)
        write_coord(vec[0])  // start point
        write_coord(vec[1])
        write_coord(vec[2])
        write_coord(velocityvec[0])  // end point
        write_coord(velocityvec[1])
        write_coord(velocityvec[2])
        write_byte(10)// byte ( life * 10 )
        if (equali(pteam,"CT")) write_byte(3); else write_byte(1)
        write_byte(15)// byte ( length * 10 )
        message_end()
        return PLUGIN_CONTINUE
}
//----------------------------------------------------------------------------------------------

