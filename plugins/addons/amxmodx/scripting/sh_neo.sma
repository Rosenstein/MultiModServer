// Neo! - Right out of the Matrix!

/* CVARS - Copy and paste in shconfig.cfg

//Neo
neo_level 10		//Def=10
neo_health 150		//Def=150
neo_armor 350		//Def=350
neo_gravity 5.0		//Def=5.0
neo_speed 900		//Def=900
neo_mode 1			//Def=1
neo_flyspeed 1000		//Def=1000
neo_flybeforeftime 1	//Def=1
neo_fly_upforce 1000	//Def=1000
neo_fly_downforce 1000 	//Def=1000
neo_toggle 0		//Def=0

*/

#include <amxmodx>
#include <amxmisc> 
#include <xtrafun>
#include <Vexd_Utilities>
#include <superheromod>

// GLOBAL VARIABLES
new gHeroName[]="Neo"
new bool:gHasNeoPowers[SH_MAXSLOTS+1]
new bool:gmorphed[SH_MAXSLOTS+1]
new gTaskID
#define TE_USERNEO	127

//Flying Ability
new bool: isflying[33] 
new bool: flytoggle[33] 
new bool: ftime 
new Float: Velocity[33][3] 

new lastammo[33]
new lastweap[33]
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Neo", "1.1", "thechosenone")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("neo_level", "10")
	register_cvar("neo_health", "150")
	register_cvar("neo_armor", "350")
	register_cvar("neo_gravity", "5.0")
	register_cvar("neo_speed", "900")
	register_cvar("neo_mode", "1" )
	register_cvar("neo_flyspeed","1000") 
  	register_cvar("neo_flybeforeftime","1") 
  	register_cvar("neo_fly_upforce","1000") 
  	register_cvar("neo_fly_downforce","1000") 
  	register_cvar("neo_toggle","0")
  	if (get_cvar_num("neo_mode")!=1){
		shCreateHero(gHeroName, "Neo!", "You Look Like Neo", false, "neo_level" )
  	}
	else{
		shCreateHero(gHeroName, "Neo!", "You Look Like Neo", true, "neo_level" )
  	}

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// INIT
	register_srvcmd("neo_init", "neo_init")
	shRegHeroInit(gHeroName, "neo_init")
	register_event("CurWeapon", "make_neo", "be", "1=1", "3>0")
	register_event("DeathMsg", "neo_death", "a")
	register_event("SendAudio","ftime_up","b","2=%!MRAD_GO","2=%!MRAD_MOVEOUT","2=%!MRAD_LETSGO","2=%!MRAD_LOCKNLOAD") 
  	register_event("SendAudio","end_round","a","2=%!MRAD_terwin","2=%!MRAD_ctwin","2=%!MRAD_rounddraw") 
  	register_event("ResetHUD", "new_round", "b") 
	
	// KEY UP
  	register_srvcmd("neo_ku",   "neo_ku")
  	shRegKeyUp(gHeroName, "neo_ku")
  	
	// KEY DOWN
  	register_srvcmd("neo_kd", "neo_kd")
  	shRegKeyDown(gHeroName, "neo_kd")
	

	// Let Server know about neo Zero Variables
	shSetShieldRestrict(gHeroName)
	shSetMaxHealth(gHeroName, "neo_health")
	shSetMaxArmor(gHeroName, "neo_armor")
	shSetMinGravity(gHeroName, "neo_gravity")
	shSetMaxSpeed(gHeroName, "neo_speed", "[0]")
}
//----------------------------------------------------------------------------------------------
public neo_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	// 2nd Argument is 0 or 1 depending on whether the id has Neo
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)
	gHasNeoPowers[id] = (hasPowers!=0)

	//Reset thier shield restrict status
	//Shield restrict MUST be before weapons are given out
	shResetShield(id)
		
	if(flytoggle[id] || isflying[id]) 
    { 
       stop_fly(id) 
    } 
	if ( is_user_connected(id) ) {
		if ( gHasNeoPowers[id] ) {
			neo_tasks(id)
		}
		else {
			neo_unmorph(id)
			shRemHealthPower(id)
			shRemArmorPower(id)
			shRemGravityPower(id)
			shRemSpeedPower(id)
		}
	}
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	precache_model("models/player/Neo/Neo.mdl")
	return PLUGIN_CONTINUE 
}
//----------------------------------------------------------------------------------------------
public make_neo(id)
{
    new weap = read_data(2)   // id of the weapon
    new ammo = read_data(3)   // ammo left in clip
    new pteam[16]
    new players[32]
    new i, n
    get_user_team(id, pteam, 15)
    if (lastweap[id] == 0) lastweap[id] = weap
    if ((lastammo[id] > ammo) && (lastweap[id] == weap)) {

  get_players(players, n, "c")
  new vec[3]
  new aimvec[3]
  new velocityvec[3]
  new length
  new speed = 2400
  get_user_origin(id,vec)
  get_user_origin(id,aimvec,4)
  vec[2] -= 6
  velocityvec[0]=aimvec[0]-vec[0]
  velocityvec[1]=aimvec[1]-vec[1]
  velocityvec[2]=aimvec[2]-vec[2]
  length=sqrt(velocityvec[0]*velocityvec[0]+velocityvec[1]*velocityvec[1]+velocityvec[2]*velocityvec[2])
  velocityvec[0]=velocityvec[0]*speed/length
  velocityvec[1]=velocityvec[1]*speed/length
  velocityvec[2]=velocityvec[2]*speed/length

  for(i = 0; i < n; i++)
        if ((is_user_connected(players[i])) && (gHasNeoPowers[players[i]]==true))
          draw_neo_for(players[i], pteam, vec , velocityvec)
      }
    lastammo[id] = ammo
    lastweap[id] = weap
    return PLUGIN_CONTINUE
 }
//----------------------------------------------------------------------------------------------
public draw_neo_for(pl, pteam[], vec[3], velocityvec[3])
{
        message_begin(MSG_ONE, SVC_TEMPENTITY, vec, pl)
        write_byte(TE_USERNEO)
        write_coord(vec[0])  // start point
        write_coord(vec[1])
        write_coord(vec[2])
        write_coord(velocityvec[0])  // end point
        write_coord(velocityvec[1])
        write_coord(velocityvec[2])
        write_byte(10)// byte ( life * 10 )
        if (equali(pteam,"CT")) write_byte(3); else write_byte(1)
        write_byte(15)// byte ( length * 10 )
        message_end()
        return PLUGIN_CONTINUE
}
//----------------------------------------------------------------------------------------------
public neo_tasks(id)
{
	set_task(1.0, "neo_morph", id)

	if( get_cvar_num("neo_teamglow") ){
		set_task(1.0, "neo_glow", id+gTaskID, "", 0, "b" )
	}
}
//----------------------------------------------------------------------------------------------
public neo_morph(id)
{
	if ( gmorphed[id] || !is_user_alive(id) ) return

	cs_set_user_model(id, "Neo")

	// Message
	set_hudmessage(50, 205, 50, -1.0, 0.40, 2, 0.02, 4.0, 0.01, 0.1, 7)
	show_hudmessage(id, "You are now Neo")

	gmorphed[id] = true
}
//----------------------------------------------------------------------------------------------
public neo_unmorph(id)
{
	if ( gmorphed[id] ) {
		// Message
		set_hudmessage(50, 205, 50, -1.0, 0.40, 2, 0.02, 4.0, 0.01, 0.1, 7)
		show_hudmessage(id, "You arent Neo anymore")

		cs_reset_user_model(id)

		gmorphed[id] = false

		if ( get_cvar_num("neo_teamglow") ) {
			remove_task(id+gTaskID)
			set_user_rendering(id)
		}
	}
}
//----------------------------------------------------------------------------------------------
public neo_glow(id)
{
	id -= gTaskID

	if ( !is_user_connected(id) ) {
		//Don't want any left over residuals
		remove_task(id+gTaskID)
		return
	}

	if ( gHasNeoPowers[id] && is_user_alive(id)) {
		if ( get_user_team(id) == 1 ) {
			shGlow(id, 255, 0, 0)
		}
		else {
			shGlow(id, 0, 0, 255)
		}
	}
}
//----------------------------------------------------------------------------------------------
public neo_death()
{
	new id = read_data(2)
	neo_unmorph(id)
}
//----------------------------------------------------------------------------------------------
public client_connect(id)
{
	gmorphed[id] = false
}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYDOWN
public neo_kd() 
{ 
  new temp[6]
  
  // First Argument is an id with neo Powers!
  read_argv(1,temp,5)
  new id=str_to_num(temp)
  
  if ( gPlayerUltimateUsed[id] )
  {
    playSoundDenySelect(id)
    return PLUGIN_HANDLED 
  } 
  
  // If in toggle mode change this to a keyup event
  if ( get_cvar_num("neo_toggle") && flytoggle[id] ) 
  {
    stop_fly(id)
    return PLUGIN_HANDLED
  }

  make_fly(id)

  return PLUGIN_HANDLED 
} 
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYUP
public neo_ku() 
{ 
  new temp[6]
  
  // toggle mode - keyup doesn't do anything!
  if ( get_cvar_num("neo_toggle") ) return PLUGIN_HANDLED
  
  // First Argument is an id with neo Powers!
  read_argv(1,temp,5)
  new id=str_to_num(temp)

  stop_fly(id)
  return PLUGIN_HANDLED 
} 
//----------------------------------------------------------------------------------------------
public new_round(id) 
{ 
	if(flytoggle[id] || isflying[id]) 
	{ 
		stop_fly(id) 
	} 

	if ( gHasNeoPowers[id] && is_user_alive(id) && shModActive() ) 
	{
		neo_tasks(id)
	} 
} 
//----------------------------------------------------------------------------------------------
public end_round() 
{ 
   ftime = true 
    
   return PLUGIN_HANDLED 
} 
//----------------------------------------------------------------------------------------------
public ftime_up() 
{ 
   ftime = false 
   return PLUGIN_HANDLED 
} 
//----------------------------------------------------------------------------------------------
public make_fly(id) 
{ 
   if(!is_user_alive(id)) return PLUGIN_HANDLED 
    
   if(flytoggle[id]) 
   { 
   stop_fly(id) 
   return PLUGIN_HANDLED 
   } 
    
   new arg[20] 
   read_argv(0,arg,19) 
    
   if(get_cvar_num("neo_toggle")==1) flytoggle[id] = true 
  
   if(isflying[id]) client_print(id,print_center,"") 
    
   if(ftime && get_cvar_num("neo_flybeforeftime") == 1) 
   { 
   client_print(id,print_notify,"") 
   return PLUGIN_HANDLED 
   } 
    
   client_print(id,print_center,"") 
       
   new parm[1] 
   parm[0] = id 
    
   set_user_gravity(id,0.001) 
    
   set_task(0.1,"user_fly",5327+id, parm,1, "b") 
    
   isflying[id] = true 
    

   return PLUGIN_HANDLED 
} 
//----------------------------------------------------------------------------------------------
public stop_fly(id) 
{ 
   if(!isflying[id]) return PLUGIN_HANDLED 
   if(get_cvar_num("neo_toggle")==1) flytoggle[id] = false
   client_print(id,print_center,"") 

   shSetGravityPower(id)
   shResetSpeed(id)
    
   isflying[id] = false 
   flytoggle[id] = false 
   remove_task(5327+id) 
    
   return PLUGIN_HANDLED 
}
//----------------------------------------------------------------------------------------------
public user_fly(parm[]) 
{ 
   
   new Float: xAngles[3] 
   new Float: xOrigin[3] 
    
   new xEnt 
    
   new id 
   id = parm[0] 
    
   if(!is_user_alive(id)) stop_fly(id) 
    
   if(get_user_button(id)&IN_FORWARD && get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_JUMP)  // FORWARD + MOVERIGHT + JUMP 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = -45.0 
   xAngles[1] -= 45 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_FORWARD && get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_DUCK)  // FORWARD + MOVERIGHT + DUCK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 45.0 
   xAngles[1] -= 45 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_FORWARD && get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_JUMP)  // FORWARD + MOVELEFT + JUMP 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = -45.0 
   xAngles[1] += 45 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_FORWARD && get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_DUCK)  // FORWARD + MOVELEFT + DUCK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 45.0 
   xAngles[1] += 45 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_JUMP && get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_BACK)  // BACK + MOVERIGHT + JUMP 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = -45.0 
   xAngles[1] -= 135 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_BACK && get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_DUCK)  // BACK + MOVERIGHT + DUCK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 45.0 
   xAngles[1] -= 135 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_JUMP && get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_BACK)  // BACK + MOVELEFT + JUMP 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = -45.0 
   xAngles[1] += 135 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_BACK && get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_DUCK)  // BACK + MOVELEFT + DUCK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 45.0 
   xAngles[1] += 135 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_FORWARD) //  MOVERIGHT  + FORWARD 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 0.0 
   xAngles[1] -= 45 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_BACK) // MOVERIGHT + BACK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 0.0 
   xAngles[1] -= 135 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_FORWARD) // MOVELEFT + FORWARD 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 0.0 
   xAngles[1] += 45 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_BACK) // MOVELEFT + BACK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 0.0 
   xAngles[1] += 135 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_FORWARD && get_user_button(id)&IN_JUMP)  // FORWARD + JUMP 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = -45.0 

   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_FORWARD && get_user_button(id)&IN_DUCK)  // FORWARD + DUCK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 45.0 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_BACK && get_user_button(id)&IN_JUMP)  // BACK + JUMP 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = -45.0 
   xAngles[1] += 180 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_BACK && get_user_button(id)&IN_DUCK)  // BACK + DUCK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 45.0 
   xAngles[1] += 180 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   }    
   else if(get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_JUMP)  // MOVERIGHT + JUMP 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = -45.0 
   xAngles[1] -= 90 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_DUCK)  // MOVERIGHT + DUCK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 45.0 
   xAngles[1] -= 90 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_JUMP)  // MOVELEFT + JUMP 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = -45.0 
   xAngles[1] += 90 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_DUCK)  // MOVELEFT + DUCK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 45.0 
   xAngles[1] += 90 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_FORWARD) // FORWARD 
   VelocityByAim(id, get_cvar_num("neo_flyspeed") , Velocity[id]) 
   else if(get_user_button(id)&IN_BACK) // BACK 
   VelocityByAim(id, -get_cvar_num("neo_flyspeed") , Velocity[id]) 
   else if(get_user_button(id)&IN_DUCK) // DUCK 
   { 
   Velocity[id][0] = 0.0 
   Velocity[id][1] = 0.0 
   Velocity[id][2] = -get_cvar_num("neo_flyspeed") * 1.0 
   } 
   else if(get_user_button(id)&IN_JUMP) // JUMP 
   { 
   Velocity[id][0] = 0.0 
   Velocity[id][1] = 0.0 
   Velocity[id][2] = get_cvar_num("neo_flyspeed") * 1.0 
   } 
   else if(get_user_button(id)&IN_MOVERIGHT) // MOVERIGHT 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 0.0 
   xAngles[1] -= 90 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_MOVELEFT) // MOVELEFT 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 0.0 
   xAngles[1] += 90 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else 
   { 
   Velocity[id][0] = 0.0 
   Velocity[id][1] = 0.0 
   Velocity[id][2] = 0.0 
   } 
    
    
   Entvars_Set_Vector(id, EV_VEC_velocity, Velocity[id]) 
    
   new Float: pOrigin[3] 
   new Float: zOrigin[3] 
   new Float: zResult[3] 
    
   Entvars_Get_Vector(id, EV_VEC_origin, pOrigin) 
    
   zOrigin[0] = pOrigin[0] 
   zOrigin[1] = pOrigin[1] 
   zOrigin[2] = pOrigin[2] - 1000 
    
   TraceLn(id,pOrigin, zOrigin, zResult) 
    
   if(Entvars_Get_Int(id, EV_INT_sequence) != 8 && (zResult[2] + 100) < pOrigin[2] && is_user_alive(id) && (Velocity[id][0] > 0.0 && Velocity[id][1] > 0.0 && Velocity[id][2] > 0.0)) 
   Entvars_Set_Int(id, EV_INT_sequence, 8) 
    
   return PLUGIN_HANDLED 
} 
//----------------------------------------------------------------------------------------------