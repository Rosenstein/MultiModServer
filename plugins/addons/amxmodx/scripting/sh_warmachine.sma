//WAR MACHINE! from Marvel Comics. Jim Rhodes was an Iron Man replacement at times and was given armor built as an all-out offensive armor by Stark(Iron Man).

/* CVARS - copy and paste to shconfig.cfg

//War Machine
warmachine_level 0
warmachine_dmgmult 1.5		//Damage multiplier for every weapon
warmachine_timer 0.1		//How often (seconds) to run the loop
warmachine_thrust 110		//The upward boost every loop
warmachine_maxspeed 400		//Max x and y speeds (while in air)
warmachine_xymult 1.15		//Multiplies the current x,y vector when moving
warmachine_armorfuel 1		//Uses armor as fuel
warmachine_fuelcost 2		//How much armor does it cost per firing
warmachine_armor 150		//How much armor does war machine start with/regen to

*/

/*
* v1.1 - vittu - 8/6/05
*      - Fixed issue which prevented users from getting thier max armor
*          (fix thanks to JTP10181).
*
* v1.0 - vittu - 7/25/05
*      - Cleaned up code.
*      - Added cvar for all weapon damage multiplier, and lowered
*          value from x3 to x1.5.
*      - Changed jet burn sound.
*      - Changed some cvar defaults to differentiate from Iron Man,
*          but also to make him seem heavier due to heavy weaponry.
*
*   Based Iron Man, which was based on Jetpack by Lazy / Modifications by OLO
*/

#include <amxmod>
#include <Vexd_Utilities>
#include <superheromod>

// GLOBAL VARIABLES
new gHeroName[]="War Machine"
new bool:gHasWarMachinePower[SH_MAXSLOTS+1]
new bool:gJetPackRunning[SH_MAXSLOTS+1]
new bool:gRegenAllowed[SH_MAXSLOTS+1]
new gSpriteFire

// BECAUSE THIS LOOP IS CALLED SO MUCH - INSTEAD OF READING CVARS OVER AND OVER
// I'LL KEEP IN GLOBAL - FOR ANTI-LAG HOPEFULLY
new Float:gThrust, Float:gMaxSpeed, gUseFuel, gFuelCost, Float:gMultiplier, gWarMachineArmor
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO War Machine", "1.1", "Dragoon")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("warmachine_level", "0")
	register_cvar("warmachine_dmgmult", "1.5")
	register_cvar("warmachine_timer", "0.1")
	register_cvar("warmachine_thrust", "110")
	register_cvar("warmachine_maxspeed", "400")
	register_cvar("warmachine_xymult", "1.15")
	register_cvar("warmachine_armorfuel", "1")
	register_cvar("warmachine_fuelcost", "2")
	register_cvar("warmachine_armor", "150")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(gHeroName, "Jet-Boots/Damage", "Rocket Jet Boots, jump and rocket to take off! Heavy Weaponry, Extra Damage for all weapons.", true, "warmachine_level")

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// INIT
	register_srvcmd("warmachine_init", "warmachine_init")
	shRegHeroInit(gHeroName, "warmachine_init")

	// KEY UP
	register_srvcmd("warmachine_ku", "warmachine_ku")
	shRegKeyUp(gHeroName, "warmachine_ku")

	// KEY DOWN
	register_srvcmd("warmachine_kd", "warmachine_kd")
	shRegKeyDown(gHeroName, "warmachine_kd")

	// EVENTS
	register_event("ResetHUD", "newSpawn", "b")
	register_event("DeathMsg", "warmachine_death", "a")
	register_event("Damage", "warmachine_damage", "b", "2!0")

	// Let Server know about War Machine's varibles
	shSetMaxArmor(gHeroName, "warmachine_armor")
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	gSpriteFire = precache_model("sprites/fire.spr")
	precache_sound("ambience/rocketflame1.wav")
	precache_sound("debris/beamstart11.wav")
}
//----------------------------------------------------------------------------------------------
public warmachine_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	// 2nd Argument is 0 or 1 depending on whether the id has the power
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)

	// Clear out any stale tasks
	remove_task(id)

	if ( hasPowers ) {
		set_task(get_cvar_float("warmachine_timer"), "warmachine_loop", id, "", 0, "b")
	}
	// This gets run if they had the power but don't anymore
	else if ( gHasWarMachinePower[id] ) {
		shRemArmorPower(id)
	}

	// Sets this variabl	e to the current status
	gHasWarMachinePower[id] = (hasPowers!=0)
}
//----------------------------------------------------------------------------------------------
public plugin_cfg()
{
	loadCVARS()
}
//----------------------------------------------------------------------------------------------
public loadCVARS()
{
	gThrust = get_cvar_float("warmachine_thrust")
	gMaxSpeed = get_cvar_float("warmachine_maxspeed")
	gMultiplier = get_cvar_float("warmachine_xymult")
	gUseFuel = get_cvar_num("warmachine_armorfuel")
	gFuelCost = get_cvar_num("warmachine_fuelcost")
	gWarMachineArmor = get_cvar_num("warmachine_armor")
}
//----------------------------------------------------------------------------------------------
public newSpawn(id)
{
	gRegenAllowed[id] = false
	set_task(1.0, "spawnDelay", id)
}
//----------------------------------------------------------------------------------------------
public spawnDelay(id)
{
	gRegenAllowed[id] = true
}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYDOWN
public warmachine_kd()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if ( !is_user_alive(id) || !hasRoundStarted() ) return

	gJetPackRunning[id] = true
	set_user_info(id, "JP", "1")

	//Reload CVARS to make sure the variables are current
	loadCVARS()
}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYUP
public warmachine_ku()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if ( !gJetPackRunning[id] ) return

	gJetPackRunning[id] = false
	set_user_info(id, "JP", "0")

	emit_sound(id, CHAN_WEAPON, "debris/beamstart11.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)
}
//----------------------------------------------------------------------------------------------
public warmachine_loop(id)
{
	new Float:velocity[3]
	new origin[3], userArmor

	if ( !is_user_alive(id) || !gRegenAllowed[id] ) return

	// Increase armor for this guy
	userArmor = get_user_armor(id)
	if ( userArmor < gWarMachineArmor && !gJetPackRunning[id] ) {

		//Give the armor item first so CS knows the player has armor
		if (userArmor <= 0) give_item(id, "item_assaultsuit")

		//Set the armor to what we want it to be
		set_user_armor(id, userArmor + 1)
		return
	}

	// OK - We'll make this armor based - but also add armor
	// So you can run out of fuel, but get it back too
	if ( gUseFuel != 0 && gFuelCost > userArmor && gJetPackRunning[id] ) {
		playSoundDenySelect(id)
		gJetPackRunning[id] = false
		set_user_info(id, "JP", "0")
		emit_sound(id, CHAN_WEAPON, "debris/beamstart11.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)
		client_print(id, print_center, "[SH](War Machine) You ran out of Jet-Boot Fuel")
		return
	}

	if ( gJetPackRunning[id] ) {

		// Decrement Fuel
		if ( gUseFuel != 0 ) {
			set_user_armor(id, userArmor - gFuelCost)
		}

		Entvars_Get_Vector(id, EV_VEC_velocity, velocity)

		velocity[0] = velocity[0] * gMultiplier
		velocity[1] = velocity[1] * gMultiplier
		velocity[2] += gThrust

		if ( velocity[0] > gMaxSpeed ) 		velocity[0] = gMaxSpeed
		if ( velocity[0] < (gMaxSpeed * -1) )	velocity[0] = gMaxSpeed * -1
		if ( velocity[1] > gMaxSpeed )		velocity[1] = gMaxSpeed
		if ( velocity[1] < (gMaxSpeed * -1) )	velocity[1] = gMaxSpeed * -1
		if ( velocity[2] > (gThrust * 2) )		velocity[2] = gThrust * 2

		Entvars_Set_Vector(id, EV_VEC_velocity, velocity)

		get_user_origin(id, origin)
		origin[2] -= 30
		jetPackFireEffect(origin)
		emit_sound(id, CHAN_WEAPON, "ambience/rocketflame1.wav", 0.6, ATTN_NORM, 0, PITCH_LOW)
	}
}
//----------------------------------------------------------------------------------------------
public jetPackFireEffect(location[3])
{
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(17)
	write_coord(location[0])
	write_coord(location[1])
	write_coord(location[2])
	write_short(gSpriteFire)
	write_byte(5)
	write_byte(125)
	message_end()
}
//----------------------------------------------------------------------------------------------
public warmachine_death()
{
	new id = read_data(2)

	if ( id <= 0 || id > SH_MAXSLOTS ) return

	gJetPackRunning[id] = false
	set_user_info(id, "JP", "0")
	gRegenAllowed[id] = false
}
//----------------------------------------------------------------------------------------------
public client_disconnect(id)
{
	// stupid check but lets see
	if ( id <= 0 || id > SH_MAXSLOTS ) return

	gHasWarMachinePower[id] = false
	gJetPackRunning[id] = false
	set_user_info(id, "JP", "0")
	gRegenAllowed[id] = false

	// Yeah don't want any left over residuals
	remove_task(id)
}
//----------------------------------------------------------------------------------------------
public client_connect(id)
{
	// stupid check but lets see
	if ( id <= 0 || id > SH_MAXSLOTS ) return

	gHasWarMachinePower[id] = false
	gJetPackRunning[id] = false
	set_user_info(id, "JP", "0")
	gRegenAllowed[id] = false

	// Yeah don't want any left over residuals
	remove_task(id)
}
//----------------------------------------------------------------------------------------------
public warmachine_damage(id)
{
	if ( !shModActive() || !is_user_alive(id) ) return

	new damage = read_data(2)
	new weaponid, bodypart, attacker = get_user_attacker(id, weaponid, bodypart)
	new headshot = bodypart == 1 ? 1 : 0

	if ( attacker <= 0 || attacker > SH_MAXSLOTS ) return

	if ( gHasWarMachinePower[attacker] && is_user_alive(id) && id != attacker ) {
		new weaponName[32]
		get_weaponname(weaponid, weaponName, 31)
		replace(weaponName, 31, "weapon_", "")

		// do extra damage
		new extraDamage = floatround(damage * get_cvar_float("warmachine_dmgmult") - damage)
		if (extraDamage > 0) shExtraDamage(id, attacker, extraDamage, weaponName, headshot)
	}
}
//----------------------------------------------------------------------------------------------