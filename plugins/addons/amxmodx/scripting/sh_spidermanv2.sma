// Spider-Man V2 - From Spider-Man Movies / He Can Jump High and has Spider Sense
// Spider-Sense Ability is Based on hero Psylocke(StuD|MaN)

#include <amxmod>
#include <amxmodx>
#include <Vexd_Utilities>
#include <superheromod>
#include <amxmisc>
#include <engine>

/*

//Spider-Man V2
spiderv2_level 3
spiderv2_jumpheight 600	//How high can Spider-Man V2 jump (default=600)

*/

// GLOBAL VARIABLES
new gHeroName[]="Spider-Man V2"
new bool:g_hasspiderv2Power[SH_MAXSLOTS+1]
new gClosestDist[SH_MAXSLOTS+1]
new Float:jumpVeloc[33][3]
new bool:caughtJump[33]
new bool:doJump[33]
new newButton[33]
new numJumps[33]
new wallteam
//-------------------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Spider-Man V2", "1.15", "Neogaiden(z)/Strife")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("spiderv2_level", "3")
	register_cvar("spiderv2_jumpheight","600")

	// DO NOT EDIT THIS ALSO!
	register_cvar("highjump_num","1")
	register_cvar("highjump_team", "0")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(gHeroName, "High Jump/Spider Sense", "Press and Hold Jump, before hitting ground press Keydown to Jump even higher", true, "spiderv2_level")

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// INIT
	register_srvcmd("spiderv2_init", "spiderv2_init")
	shRegHeroInit(gHeroName, "spiderv2_init")

	// NEW SPAWN
	register_event("ResetHUD", "newSpawn", "b")

	// Key Down
	register_srvcmd("spiderv2_kd", "spiderv2_kd")
	shRegKeyDown(gHeroName, "spiderv2_kd")

	// Key Up
	register_srvcmd("spiderv2_ku", "spiderv2_ku")
	shRegKeyUp(gHeroName, "spiderv2_ku")

	// Death
	register_event("DeathMsg", "spiderv2_death", "a")

	// Spider Sense Loop
	set_task(0.1, "spider_sense", 0, "", 0, "b")
}
//-------------------------------------------------------------------------------------------------------
public spiderv2_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1, temp, 5)
	new id = str_to_num(temp)

	// 2nd Argument is 0 or 1 depending on whether the id has spiderv2 Powers
	read_argv(2, temp, 5)
	new hasPowers=str_to_num(temp)

	if ( is_user_alive(id) && g_hasspiderv2Power[id] )

	doJump[id] = false
	caughtJump[id] = false
	g_hasspiderv2Power[id]=(hasPowers!=0)
}
//-------------------------------------------------------------------------------------------------------
public newSpawn(id)
{
	if ( is_user_alive(id) )
	doJump[id] = false
	caughtJump[id] = false
}
//-------------------------------------------------------------------------------------------------------
public spiderv2_kd()
{
	if ( !hasRoundStarted() )
		return

	// First Argument is an id
	new temp[6]
	read_argv(1, temp, 5)
	new id = str_to_num(temp)

	// Do Extra Higher Jump if Jump is Hold
	usingjump(id)
}
//-------------------------------------------------------------------------------------------------------
public spiderv2_ku()
{
	// First Argument is an id
	new temp[6]
	read_argv(1, temp, 5)
	new id = str_to_num(temp)

	if ( is_user_alive(id) && g_hasspiderv2Power[id] )

	doJump[id] = false
	caughtJump[id] = false
}
//-------------------------------------------------------------------------------------------------------
public spiderv2_death()
{
	new id = read_data(2)

	doJump[id] = false
	caughtJump[id] = false
}
//-------------------------------------------------------------------------------------------------------
public spider_sense()
{
	if ( !shModActive() || !hasRoundStarted() ) return

	new distance, Origin[3], eOrigin[3]
	new players[SH_MAXSLOTS], pnum, id, enemy

	get_players(players, pnum, "a")

	for (new i = 0; i < pnum; i++) {
		id = players[i]
		if ( g_hasspiderv2Power[id] && is_user_alive(id) ) {

			gClosestDist[id] = 1182

			for (new e = 0; e < pnum; e++) {
				enemy = players[e]
				if( !is_user_alive(enemy) || get_user_team(id) == get_user_team(enemy) ) continue

				get_user_origin(id, Origin)

				get_user_origin(enemy, eOrigin)

				distance = get_distance(eOrigin, Origin)

				if (distance <= gClosestDist[id]){
					gClosestDist[id] = distance
				}
			}

			// get_distance() returns inches and 1 inch = 0.0254 meters
			if (gClosestDist[id] * 0.0254 <= 10.0) {
				set_hudmessage(255, 0, 0, 0.01, 0.27, 1, 6.0, 0.5, 0.1, 0.1, 155)
				show_hudmessage(id, "Spidey Sense Tingling! Enemy Detected Within 10 Meters!!!")
			}
			else if (gClosestDist[id] * 0.0254 <= 20.0) {
				set_hudmessage(255, 50, 50, 0.01, 0.27, 1, 6.0, 0.5, 0.1, 0.1, 155)
				show_hudmessage(id, "Spidey Sense Tingling! Enemy Detected Within 20 Meters!!")
			}
			else if (gClosestDist[id] * 0.0254 <= 30.0) {
				set_hudmessage(255, 110, 110, 0.01, 0.27, 1, 6.0, 0.5, 0.1, 0.1, 155)
				show_hudmessage(id, "Spidey Sense Tingling! Enemy Detected Within 30 Meters!")
			}
		}
	}
}
//-------------------------------------------------------------------------------------------------------
public client_PreThink(id)
{
	wallteam = get_cvar_num("highjump_team")
	new team = get_user_team(id)
	if(g_hasspiderv2Power[id] && (!wallteam || wallteam == team)) 
	{
		newButton[id] = get_user_button(id)
		new flags = get_entity_flags(id)
		
		//reset if we are on ground
		if(caughtJump[id] && (flags & FL_ONGROUND)) 
		{
			numJumps[id] = 0
			caughtJump[id] = false
		}
		//begin when keydown pressed
		if ((newButton[id] & IN_JUMP) && (flags & FL_ONGROUND) && !caughtJump[id] && !numJumps[id]) 
		{
			caughtJump[id] = true
			entity_get_vector(id,EV_VEC_velocity,jumpVeloc[id])
			jumpVeloc[id][2] = get_cvar_float("spiderv2_jumpheight")
		}
	}
}
//-------------------------------------------------------------------------------------------------------
public client_PostThink(id) 
{
	if(g_hasspiderv2Power[id] && is_user_alive(id)) 
	{
		//do velocity if we highjumped
		if(doJump[id]) 
		{
			entity_set_vector(id,EV_VEC_velocity,jumpVeloc[id])
			
			doJump[id] = false
			
			if(numJumps[id] >= get_cvar_num("highjump_num")) //reset if we ran out of jumps
			{
				numJumps[id] = 0
				caughtJump[id] = false
				
			}
		}
	}
}
//-------------------------------------------------------------------------------------------------------
public usingjump(id) 
{
	if(g_hasspiderv2Power[id] && is_user_alive(id)) 
	{
		//if we touch wall and have jump pressed, setup for jump
		if(caughtJump[id] && (newButton[id] & IN_JUMP) && !(get_entity_flags(id) & FL_ONGROUND)) 
		{		
			
			// Do Not Edit This :: May Cause Bug On Jumping Ability ::
			for(new x=0;x<2;x++)
				jumpVeloc[id][x] *= 1.0
				
			numJumps[id]++
			doJump[id] = true
		}	
	}
}
//-------------------------------------------------------------------------------------------------------