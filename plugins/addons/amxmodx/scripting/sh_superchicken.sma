// Super Chicken!

/*

Become Super Chicken - You knew the job was Dangerous when you took it!

Big Thanks To Vittu For His Help And His Master Chief.
Also Big Thanks To The Original Chicken Mod, Very Innovative LOL.


Version History:

1.0 - Yang 25/Jan/06

- Initial Release.

*/

/* CVARS - copy and paste to shconfig.cfg

//Super Chicken
chicken_level 0
chicken_teamglow 0		//Glow Team Color when player skin in use (0=no 1=yes)
chicken_health 100		//Default 100 (no extra health)
chicken_armor 100		//Default 100
chicken_gravity 1.0		//Default 1.0 = no extra gravity (0.50 is 50% normal gravity, ect.)
chicken_speed -1		//Default -1 = no extra speed, this cvar is for all weapons (for faster then normal speed set to 321 or higher)
chicken_knifemult 2.0
*/

/*
*/

#include <amxmodx>
#include <Vexd_Utilities>
#include <fakemeta>
#include <superheromod>

// GLOBAL VARIABLES
new gHeroName[]="Super Chicken"
new bool:gHasChickenPower[SH_MAXSLOTS+1]
new bool:gmorphed[SH_MAXSLOTS+1]
new feather
new orig[3]
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Super Chicken", "1.0", "Yang")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("chicken_level", "0")
	register_cvar("chicken_teamglow", "0")
	register_cvar("chicken_health", "100")
	register_cvar("chicken_armor", "100")
	register_cvar("chicken_gravity", "1.0")
	register_cvar("chicken_speed", "-1")
	register_cvar("chicken_knifemult", "2.0")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(gHeroName, "Not Ordinary Chicken", "You knew the job was Dangerous when you took it!", false, "chicken_level")

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// INIT
	register_srvcmd("chicken_init", "chicken_init")
	shRegHeroInit(gHeroName, "chicken_init")

	// EVENTS
	register_event("ResetHUD", "newSpawn", "b")
	register_event("CurWeapon", "chicken_weapons","be","1=1")
	register_event("Damage", "chicken_damage", "b", "2!0")
	register_event("DeathMsg", "chicken_death", "a")


	register_forward(FM_PlayerPreThink, "chicken_attack")
	register_forward(FM_TraceLine, "forward_traceline", 1)

	// Let Server know about Super Chicken's Variables
	shSetShieldRestrict(gHeroName)
	shSetMaxHealth(gHeroName, "chicken_health")
	shSetMaxArmor(gHeroName, "chicken_armor")
	shSetMinGravity(gHeroName, "chicken_gravity")
	shSetMaxSpeed(gHeroName, "chicken_speed", "[0]")
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	precache_model("models/player/chicken/chicken.mdl")
	feather = precache_model("models/feather.mdl")
	precache_sound("shmod/superchicken/chicken0.wav")
	precache_sound("shmod/superchicken/chicken1.wav")
	precache_sound("shmod/superchicken/chicken2.wav")
	precache_sound("shmod/superchicken/chicken3.wav")
	precache_sound("shmod/superchicken/chicken4.wav")
	precache_sound("shmod/superchicken/killChicken.wav")
	precache_sound("shmod/superchicken/pukpuk.wav")
	precache_sound("shmod/superchicken/sc_charge.wav")
	precache_sound("shmod/superchicken/sctheme_1st.wav")
}
//----------------------------------------------------------------------------------------------
public chicken_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1, temp, 5)
	new id = str_to_num(temp)

	// 2nd Argument is 0 or 1 depending on whether the id has the hero
	read_argv(2, temp, 5)
	new hasPowers = str_to_num(temp)

	if (!is_user_connected(id)) return

	//Reset thier shield restrict status
	//Shield restrict MUST be before weapons are given out
	shResetShield(id)

	if ( is_user_alive(id) && hasPowers ) {
		emit_sound(id, CHAN_STATIC, "shmod/superchicken/sctheme_1st.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
		engclient_cmd(id, "weapon_knife")
		chicken_weapons(id)
		chicken_tasks(id)
		set_task(25.0, "chickensound_loop", id, "", 0, "b")
	}
	//This gets run if they had the power but don't anymore
	else if ( !hasPowers && gHasChickenPower[id] ) {
		engclient_cmd(id, "drop", "weapon_knife")
		chicken_unmorph(id)
		shRemHealthPower(id)
		shRemArmorPower(id)
		shRemGravityPower(id)
		shRemSpeedPower(id)
	}

	//Sets this variable to the current status
	gHasChickenPower[id] = (hasPowers != 0)
}
//----------------------------------------------------------------------------------------------
public newSpawn(id)
{
	if ( gHasChickenPower[id] && is_user_alive(id) && shModActive() ) {
		set_task(0.1, "chicken_weapons", id)
		chicken_tasks(id)
		chicken_weapons(id)
		emit_sound(id, CHAN_STATIC, "shmod/superchicken/sctheme_1st.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
		new clip, ammo, wpnid = get_user_weapon(id, clip, ammo)
		if (wpnid != CSW_KNIFE && wpnid > 0) {
			new wpn[32]
			get_weaponname(wpnid, wpn, 31)
			engclient_cmd(id, wpn)
		}
	}
}
//----------------------------------------------------------------------------------------------
public chicken_tasks(id)
{
	set_task(1.0, "chicken_morph", id)

	if( get_cvar_num("chicken_teamglow") ){
		set_task(1.0, "chicken_glow", id+100, "", 0, "b")
	}
}
//----------------------------------------------------------------------------------------------
public chicken_weapons(id)
{
	if ( is_user_alive(id) && gHasChickenPower[id] ) {
		new ammo, clip, wid
		wid = get_user_weapon(id, clip, ammo)
		// 29 = Knife, 4 = HEGRENADE, 6 = C4
		if(wid != 29 && wid != 4 && wid != 6)
		{
			engclient_cmd(id, "weapon_knife")
			entity_set_string(id, EV_SZ_viewmodel, "")
			entity_set_string(id, EV_SZ_weaponmodel, "")
		}
		if (wid == 29 )
		{
			entity_set_string(id, EV_SZ_viewmodel, "")
			entity_set_string(id, EV_SZ_weaponmodel, "")
		}
	}
}
//----------------------------------------------------------------------------------------------
public weaponChange(id)
{
	if ( !gHasChickenPower[id] || !shModActive() ) return

	new wpnid = read_data(2)
	new clip = read_data(3)

	if ( wpnid != CSW_KNIFE ) return

	chicken_weapons(id)

	// Never Run Out of Ammo!
	if ( clip == 0 ) {
		shReloadAmmo(id)
	}
}
//----------------------------------------------------------------------------------------------
public chicken_damage(id)
{
	if ( !shModActive() || !is_user_alive(id) ) return

	new damage = read_data(2)
	new weapon, bodypart, attacker = get_user_attacker(id, weapon, bodypart)
	new headshot = bodypart == 1 ? 1 : 0

	if ( attacker <= 0 || attacker > SH_MAXSLOTS ) return

	if ( gHasChickenPower[attacker] && weapon == CSW_KNIFE && is_user_alive(id) ) {
		// do extra damage
		new extraDamage = floatround(damage * get_cvar_float("chicken_knifemult") - damage)
		if (extraDamage > 0) shExtraDamage(id, attacker, extraDamage, "beak", headshot)
	}
	if ( gHasChickenPower[id] )
	{
		create_gibs(id, orig, 5, 10, 5)
	}
}
//----------------------------------------------------------------------------------------------
public chicken_morph(id)
{
	if ( gmorphed[id] || !is_user_alive(id) ) return

	chicken_user(id)

	// Message
	set_hudmessage(50, 205, 50, -1.0, 0.40, 2, 0.02, 4.0, 0.01, 0.1, 7)
	show_hudmessage(id, "Super Chicken - Turned Into King Of Chickens")

	gmorphed[id] = true
}
//----------------------------------------------------------------------------------------------
public chicken_unmorph(id)
{
	if ( gmorphed[id] ) {
		// Message
		set_hudmessage(50, 205, 50, -1.0, 0.40, 2, 0.02, 4.0, 0.01, 0.1, 7)
		show_hudmessage(id, "Super Chicken - No Longer A Chicken.")

		unchicken_user(id)

		gmorphed[id] = false

		if ( get_cvar_num("chicken_teamglow") ) {
			remove_task(id+100)
			set_user_rendering(id)
		}
	}
}
//----------------------------------------------------------------------------------------------
public chicken_glow(id)
{
	id -= 100

	if ( !is_user_connected(id) ) {
		//Don't want any left over residuals
		remove_task(id+100)
		return
	}

	if ( gHasChickenPower[id] && is_user_alive(id) ) {
		if ( get_user_team(id) == 1 ) {
			shGlow(id, 100, 0, 0)
		}
		else {
			shGlow(id, 0, 0, 100)
		}
	}
}
//----------------------------------------------------------------------------------------------
public chicken_death()
{
	new id = read_data(2)

	if ( !gHasChickenPower[id] ) return

	emit_sound(id, CHAN_STATIC, "shmod/superchicken/killchicken.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
	create_gibs(id, orig, 5, 10, 5)
	chicken_unmorph(id)
}
//----------------------------------------------------------------------------------------------
public client_connect(id)
{
	gmorphed[id] = false
}
//----------------------------------------------------------------------------------------------
public create_gibs(id, vec[3], velocity, random, amount)
{
	// gibs
	new Float:size[3]
	entity_get_vector(id, EV_VEC_size, size)

	message_begin(MSG_PVS, SVC_TEMPENTITY, vec)
	write_byte(108) // TE_BREAKMODEL
	// position
	write_coord(vec[0])
	write_coord(vec[1])
	write_coord(vec[2])
	// size
	write_coord(floatround(size[0]))
	write_coord(floatround(size[1]))
	write_coord(floatround(size[2]))
	// velocity
	write_coord(0)
	write_coord(0)
	write_coord(velocity) //10
	// randomization
	write_byte(random) //30
	// Model
	write_short(feather)	//model id#
	// # of shards
	write_byte(amount) //30
	// duration
	write_byte(300);// 15.0 seconds
	// flags
	write_byte(0x04) // BREAK_FLESH
	message_end()
}
//----------------------------------------------------------------------------------------------
/* CHICKEN CODE */
public chicken_user(id)
{
	set_view(id, CAMERA_3RDPERSON)
	new origin[3]
	get_user_origin(id, origin)
	transform(origin)
	cs_set_user_model(id, "chicken")
	return PLUGIN_HANDLED
}
//----------------------------------------------------------------------------------------------
/* UNCHICKEN CODE */
public unchicken_user(id)
{
	new origin[3]
	get_user_origin(id, origin)
	transform(origin)
	set_view(id, CAMERA_NONE)
	cs_reset_user_model(id)
	return PLUGIN_HANDLED
}
//----------------------------------------------------------------------------------------------
/* CHICKEN SFX */
public transform(vec[3])
{
	message_begin(MSG_PVS, SVC_TEMPENTITY, vec)
	write_byte(11) // TE_TELEPORT
	write_coord(vec[0])
	write_coord(vec[1])
	write_coord(vec[2])
	message_end()
}

//----------------------------------------------------------------------------------------------
/* HITZONES DATA */
public forward_traceline(Float:v1[3], Float:v2[3], noMonsters, pentToSkip)
{
	new entity1 = pentToSkip
	new entity2 = get_tr(TR_pHit) // victim
	new hitzone = (1<<get_tr(TR_iHitgroup))

	if (!is_valid_ent(entity1) || !is_valid_ent(entity2))
	{
		return FMRES_IGNORED
	}
	if (entity1 != entity2 && is_user_alive(entity1) && is_user_alive(entity2) && gHasChickenPower[entity2] )
	{
		if(hitzone != 64 && hitzone != 128)
		{
			set_tr(TR_flFraction,1.0)		// KWo 19.11.2005
			return FMRES_SUPERCEDE
		}
		return FMRES_IGNORED
	}
	return FMRES_IGNORED
}

//----------------------------------------------------------------------------------------------
public chicken_attack(id)
{
	if(is_user_alive(id) && gHasChickenPower[id] )
	{
		new clip, ammo, wpnid = get_user_weapon(id,clip,ammo)
		if (((entity_get_int(id, EV_INT_button) & IN_ATTACK2) || (entity_get_int(id, EV_INT_button) & IN_ATTACK )) && wpnid == CSW_KNIFE )
		{
			switch(random_num(0, 3))
			{
				case 0: emit_sound(id, CHAN_VOICE, "shmod/superchicken/chicken1.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
				case 1: emit_sound(id, CHAN_VOICE, "shmod/superchicken/chicken2.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
				case 2: emit_sound(id, CHAN_VOICE, "shmod/superchicken/chicken3.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
				case 3: emit_sound(id, CHAN_VOICE, "shmod/superchicken/chicken4.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
			}
			return FMRES_IGNORED
		}
	}
	return FMRES_IGNORED
}
//----------------------------------------------------------------------------------------------

public chickensound_loop(id)
{
	if ( gHasChickenPower[id] && is_user_alive(id) && shModActive() && hasRoundStarted() && ( random_num(0,4) < 3 )  )
	{
		switch(random_num(0, 1))
		{
			case 0: emit_sound(id, CHAN_VOICE, "shmod/superchicken/pukpuk.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
			case 1: emit_sound(id, CHAN_VOICE, "shmod/superchicken/sc_charge.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
		}
	}
}

//----------------------------------------------------------------------------------------------
