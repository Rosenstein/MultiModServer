//DR. DOOM! from Marvel Comics - main enemy of the Fantasic Four.

/* CVARS - copy and paste to shconfig.cfg

//Dr. Doom
drdoom_level 10
drdoom_armor 200			//Default 200
drdoom_speed 200			//Default 200
drdoom_laser_ammo 30		//total # of shots given each round, -1 is unlimited (Default 30)
drdoom_laser_burndecals 1	//Show the burn decals on the walls
drdoom_cooldown 0.0			//Cooldown timer between laser use
drdoom_multishot 0.25		//Delay for multishots on holding key down, set to -1 for only 1 shot per keydown (Default 0.25)
drdoom_switchtoknife 1		//Switch to knife when firing laser, 0-no 1-yes (changing requires map change)

*/

/*
* v1.2 - vittu - 7/27/05
*      - Cleaned up code.
*      - Fixed cooldown to be used correctly.
*      - Fixed switch to knife when firing laser and added cvar option
*          to turn it off.
*      - Removed glow, since it isn't really needed.
*      - Added option for unlimited laser shots.
*      - Added option to turn multishot into a single shot per keydown.
*      - Changed sound, start location, and a tiny bit of the look of the laser.
*
*   Hero is a rip of the hero Cyclops with added AP/Speed.
*/

#include <amxmod>
#include <superheromod>

// Damage Variables
#define h1_dam 100 //head
#define h2_dam 70  //body
#define h3_dam 70  //stomach
#define h4_dam 40  //arm
#define h6_dam 40  //leg

// GLOBAL VARIABLES
new gHeroName[]="Dr. Doom"
new bool:gHasDrDoomPower[SH_MAXSLOTS+1]
new bool:gLaserFired[SH_MAXSLOTS+1]
new gLaserShots[SH_MAXSLOTS+1]
new gLastWeapon[SH_MAXSLOTS+1]
new gSmokeSprite, gLaserSprite, gSwitchKnife
static const burn_decal[3] = {28, 29, 30}
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Dr. Doom", "1.2", "Necroscope")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("drdoom_level", "10")
	register_cvar("drdoom_armor", "200")
	register_cvar("drdoom_speed", "200")
	register_cvar("drdoom_laser_ammo", "30")
	register_cvar("drdoom_laser_burndecals", "1")
	register_cvar("drdoom_cooldown", "0.0")
	register_cvar("drdoom_multishot", "0.25")
	register_cvar("drdoom_switchtoknife", "1")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(gHeroName, "Gauntlet Blasters/Armor", "Hold down +power key to Fire Concussive Bolts of Force!", true, "drdoom_level")

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// INIT
	register_srvcmd("drdoom_init", "drdoom_init")
	shRegHeroInit(gHeroName, "drdoom_init")

	// KEY DOWN
	register_srvcmd("drdoom_kd", "drdoom_kd")
	shRegKeyDown(gHeroName, "drdoom_kd")

	register_srvcmd("drdoom_ku", "drdoom_ku")
	shRegKeyUp(gHeroName, "drdoom_ku")

	// NEW SPAWN
	register_event("ResetHUD", "newSpawn", "b")

	// DEATH
	register_event("DeathMsg", "drdoom_death", "a")

	// Set this varible here
	gSwitchKnife = get_cvar_num("drdoom_switchtoknife")

	// Let Server know about Dr. Doom's Variables
	shSetMaxArmor(gHeroName, "drdoom_armor")
	shSetMaxSpeed(gHeroName, "drdoom_speed", "[0]")
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	gSmokeSprite = precache_model("sprites/steam1.spr")
	gLaserSprite = precache_model("sprites/laserbeam.spr")
	precache_sound("debris/beamstart10.wav")
	precache_sound("weapons/xbow_hitbod2.wav")
}
//----------------------------------------------------------------------------------------------
public drdoom_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	// 2nd Argument is 0 or 1 depending on whether the id has the hero
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)

	if ( hasPowers ) {
		gPlayerUltimateUsed[id] = false
		gLaserShots[id] = get_cvar_num("drdoom_laser_ammo")
		gLaserFired[id] = false
	}
	// This gets run if they had the power but don't anymore
	else if( gHasDrDoomPower[id] && is_user_alive(id) ) {
		shRemArmorPower(id)
		shRemSpeedPower(id)
	}

	// Sets this variable to the current status
	gHasDrDoomPower[id] = (hasPowers != 0)
}
//----------------------------------------------------------------------------------------------
public newSpawn(id)
{
	if ( shModActive() && gHasDrDoomPower[id] && is_user_alive(id) ) {
		remove_task(id)
		gPlayerUltimateUsed[id] = false
		gLaserShots[id] = get_cvar_num("drdoom_laser_ammo")
		gLaserFired[id] = false
	}
}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYDOWN
public drdoom_kd()
{
	if ( !hasRoundStarted() ) return

	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if ( !is_user_alive(id) || !gHasDrDoomPower[id] ) return

	if ( gLaserShots[id] == 0 ) {
		client_print(id, print_center, "No Dr. Doom Blasts Left")
		playSoundDenySelect(id)
		return
	}

	if ( gPlayerUltimateUsed[id] ) {
		playSoundDenySelect(id)
		return
	}

	if ( gSwitchKnife ) {
		// Remember this weapon...
		new clip, ammo, weaponID = get_user_weapon(id, clip, ammo)
		gLastWeapon[id] = weaponID

		// switch to knife
		engclient_cmd(id, "weapon_knife")
	}

	fire_laser(id)  // 1 immediate shot
	if ( get_cvar_float("drdoom_multishot") >= 0.0 ) {
		set_task( get_cvar_float("drdoom_multishot"), "fire_laser", id, "", 0, "b")  //delayed shots
	}

	gLaserFired[id] = true
}
//----------------------------------------------------------------------------------------------
public drdoom_ku()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	remove_task(id)

	if ( !hasRoundStarted() || !gLaserFired[id] ) return

	// Use the ultimate
	if ( get_cvar_float("drdoom_cooldown") > 0.0 ) ultimateTimer(id, get_cvar_float("drdoom_cooldown"))

	if ( gSwitchKnife ) {
		// Switch back to previous weapon...
		if ( gLastWeapon[id] != CSW_KNIFE ) shSwitchWeaponID(id, gLastWeapon[id])
	}

	gLaserFired[id] = false
}
//----------------------------------------------------------------------------------------------
public fire_laser(id)
{
	new aimvec[3]
	new tid, tbody
	new FFOn = get_cvar_num("mp_friendlyfire")

	if ( !is_user_alive(id) ) return

	if ( gLaserShots[id] == 0 ) {
		client_print(id, print_center, "No Dr. Doom Blasts Left")
		playSoundDenySelect(id)
		return
	}

	if ( gSwitchKnife ) {
		// Make sure still on knife
		new clip, ammo, weaponID = get_user_weapon(id, clip, ammo)
		if ( weaponID != CSW_KNIFE ) engclient_cmd(id, "weapon_knife")
	}

	if ( gLaserShots[id] > -1 ) gLaserShots[id]--

	// Warn How many Blasts Left...
	if ( gLaserShots[id] < 6 && gLaserShots[id] >= 0 ) {
		client_print(id, print_center, "Warning: %d Dr. Doom Blasts Left", gLaserShots[id])
	}

	get_user_origin(id, aimvec, 3)

	laserEffects(id, aimvec)

	get_user_aiming(id, tid, tbody)

	if ( is_user_alive(tid) && ( FFOn || get_user_team(id) != get_user_team(tid) ) ) {
		emit_sound(tid, CHAN_BODY, "weapons/xbow_hitbod2.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)

		// Determine the damage
		new damage
		switch(tbody) {
			case 1: damage = h1_dam
			case 2: damage = h2_dam
			case 3: damage = h3_dam
			case 4: damage = h4_dam
			case 5: damage = h4_dam
			case 6: damage = h6_dam
			case 7: damage = h6_dam
		}

		// Deal the damage...
		shExtraDamage(tid, id, damage, "Dr. Doom Blast")
	}
}
//----------------------------------------------------------------------------------------------
public laserEffects(id, aimvec[3])
{
	new origin[3]
	new decal_id = burn_decal[random_num(0,2)]
	emit_sound(id, CHAN_ITEM, "debris/beamstart10.wav", 0.6, ATTN_NORM, 0, PITCH_NORM)

	get_user_origin(id, origin)
	origin[2] += 6

	// DELIGHT
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(27)
	write_coord(origin[0])	//pos
	write_coord(origin[1])
	write_coord(origin[2])
	write_byte(10)
	write_byte(255)		// r, g, b
	write_byte(255)		// r, g, b
	write_byte(0)			// r, g, b
	write_byte(2)			// life
	write_byte(1)			// decay
	message_end()

	//BEAMENTPOINTS
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte (0)			//TE_BEAMENTPOINTS
	write_coord(origin[0])
	write_coord(origin[1])
	write_coord(origin[2])
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(gLaserSprite)
	write_byte(1)			// framestart
	write_byte(5)			// framerate
	write_byte(2)			// life
	write_byte(60)			// width
	write_byte(1)			// noise
	write_byte(255)		// Red
	write_byte(255)		// Green
	write_byte(0)			// Blue
	write_byte(200)		// brightness
	write_byte(30)		// speed
	message_end()

	//Sparks
	message_begin(MSG_PVS, SVC_TEMPENTITY)
	write_byte(9)
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	message_end()

	//Smoke
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(5)
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(gSmokeSprite)
	write_byte(22)		// 10
	write_byte(10)		// 10
	message_end()

	if ( get_cvar_num("drdoom_laser_burndecals") == 1 ) {
		// decal and ricochet sound
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		write_byte(109)		//TE_GUNSHOTDECAL
		write_coord(aimvec[0])	// pos
		write_coord(aimvec[1])
		write_coord(aimvec[2])
		write_short(0)			// I have no idea what thats supposed to be
		write_byte(decal_id)	// decal
		message_end()
	}

}
//----------------------------------------------------------------------------------------------
public drdoom_death()
{
	new id = read_data(2)

	if ( id <= 0 || id > SH_MAXSLOTS ) return

	remove_task(id)
}
//----------------------------------------------------------------------------------------------
public client_disconnect(id)
{
	// stupid check but lets see
	if ( id <= 0 || id > SH_MAXSLOTS ) return

	// Yeah don't want any left over residuals
	remove_task(id)

	gHasDrDoomPower[id] = false
}
//----------------------------------------------------------------------------------------------