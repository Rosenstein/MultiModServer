/*
//Tenshinhan

tenshinhan_level 6
tenshinhan_cooldown 30
tenshinhan_flashradius 150
tenshinhan_flashtime 3
*/

/*
*   Thanx to vittu's and buttface's code on goten as base.
*/

#include <amxmod>
#include <superheromod>

new gHeroName[]="Tenshinhan"
new bool:gHasTehnshinPower[SH_MAXSLOTS+1]
new bool:gBlockKeyup[SH_MAXSLOTS+1]
new gLastWeapon[SH_MAXSLOTS+1]
new Explosion
//new Beam
new gmsgScreenFade
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Tenshinhan", "1.0", "Rockell/DuPeR")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("tenshinhan_level", "6")
	register_cvar("tenshinhan_cooldown", "2")
	register_cvar("tenshinhan_flashradius", "100")
	register_cvar("tenshinhan_flashtime", "5")


	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(gHeroName, "Solar Flare", "Fire Tenshinhan's Solar Flare to blind enemy.", true, "tenshinhan_level")

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// INIT
	register_srvcmd("tenshinhan_init", "tenshinhan_init")
	shRegHeroInit(gHeroName, "tenshinhan_init")

	//KEY DOWN
	register_srvcmd("tenshinhan_kd", "tenshinhan_kd")
	shRegKeyDown(gHeroName, "tenshinhan_kd")

	//KEY UP
	register_srvcmd("tenshinhan_ku", "tenshinhan_ku")
	shRegKeyUp(gHeroName, "tenshinhan_ku")

	register_event("ResetHUD", "newSpawn", "b")
	
	gmsgScreenFade = get_user_msgid("ScreenFade")
	
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	Explosion = precache_model("sprites/shmod/whiteexplosion.spr")
	precache_sound("shmod/solarflare.wav")
}
//----------------------------------------------------------------------------------------------
public tenshinhan_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	// 2nd Argument is 0 or 1 depending on whether the id has the hero
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)

	//Sets this variable to the current status
	gHasTehnshinPower[id] = (hasPowers != 0)
}
//----------------------------------------------------------------------------------------------
public newSpawn(id)
{
	gPlayerUltimateUsed[id] = false
}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYDOWN
public tenshinhan_kd()
{
	if ( !hasRoundStarted() ) return

	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if ( !is_user_alive(id) || !gHasTehnshinPower[id] ) return

	if ( gPlayerUltimateUsed[id] ) {
		playSoundDenySelect(id)
		gBlockKeyup[id] = true
		return
	}

	gBlockKeyup[id] = false

	// Remember this weapon...
	new clip, ammo, weaponID = get_user_weapon(id, clip, ammo)
	gLastWeapon[id] = weaponID

	// switch to knife
	engclient_cmd(id, "weapon_knife")

	fire_wave(id)

	if (get_cvar_float("tenshinhan_cooldown") > 0.0) ultimateTimer(id, get_cvar_float("tenshinhan_cooldown"))
}
//----------------------------------------------------------------------------------------------
public tenshinhan_ku()
{
	if ( !hasRoundStarted() ) return

	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if ( !is_user_alive(id) || !gHasTehnshinPower[id] || gBlockKeyup[id] ) return

	// Switch back to previous weapon...
	// Use keyup since if called too fast CurWeapon functions may be bypassed
	if (gLastWeapon[id] != CSW_KNIFE) shSwitchWeaponID(id, gLastWeapon[id])
}
//----------------------------------------------------------------------------------------------
public fire_wave(id)
{

	emit_sound(id, CHAN_VOICE, "shmod/solarflare.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
	
	new aimvec[3]
	new flashradius = get_cvar_num("tenshinhan_flashradius")
	new distanceBetween
	if( !is_user_alive(id) ) return
	new behind[3]
	get_user_origin(id, aimvec, 3)
	get_user_origin(id, behind)
	behind[0] += 10
	beam_effects(id, aimvec, behind)
	
	for(new vic = 1; vic <= SH_MAXSLOTS; vic++)
	{
	if ( is_user_alive(vic) && get_user_team(id) != get_user_team(vic) ) {

			new origin[3]
			get_user_origin(vic, origin)
			distanceBetween = get_distance(aimvec, origin)

			if ( distanceBetween < flashradius ) {
						flash(vic)
						set_task(get_cvar_float("tenshinhan_flashtime"),"unflash",vic)
					}
			}
	}
}
//----------------------------------------------------------------------------------------------
public beam_effects(id, aimvec[3], behind[3])
{
	//new beamWidth

	//Change sprite size according to blast radius
	//new blastSize = floatround(flashradius / 12.0)
	//blastSize = 50
	//Change burn decal and beam width size according to blast size
	//beamWidth = 20

	//Glow Sprite (explosion)
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(23)			//TE_GLOWSPRITE
	write_coord(aimvec[0])	//position
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(Explosion)	// model
	write_byte(10)		// life 0.x sec (01 min limit?)
	write_byte(20)	// size
	write_byte(255)		// brightness
	message_end()

	//Glow Sprite (explosion)
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(23)			//TE_GLOWSPRITE
	write_coord(behind[0])	//position
	write_coord(behind[1])
	write_coord(behind[2])
	write_short(Explosion)	// model
	write_byte(10)		// life 0.x sec (01 min limit?)
	write_byte(25)	// size
	write_byte(255)		// brightness
	message_end()
}
//----------------------------------------------------------------------------------------------
flash(vic)
{
		      message_begin(MSG_ONE,gmsgScreenFade,{0,0,0},vic)
		      write_short(15)
		      write_short(15)
		      write_short(12)
		      write_byte(255)
		      write_byte(255)
		      write_byte(255)
		      write_byte(255)
		      message_end()
}
public unflash(vic)
{
       setScreenFlash(vic, 0, 0, 0, 1, 0)
}