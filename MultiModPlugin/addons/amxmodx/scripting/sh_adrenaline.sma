

/* CVARS - copy and paste to shconfig.cfg

*/
#include <amxmod>
#include <superheromod>


new bool:gHasAdrenalinePower[SH_MAXSLOTS+1]
new Cooldown[SH_MAXSLOTS+1] = 0
new AdrenLenth[SH_MAXSLOTS+1] 
new Float:NormalSpeed[SH_MAXSLOTS+1] 
new Afterlenth[SH_MAXSLOTS+1] 
new gHeroName[]="Adrenaline"
new HealPoints[SH_MAXSLOTS+1] 
new NormalHealth[SH_MAXSLOTS+1] 
new LenthHeal[SH_MAXSLOTS+1] 
new Float:AdrenalineSpeed[SH_MAXSLOTS+1] 
new gSound[] = "shmod/goku_powerup3.wav"
new speed[SH_MAXSLOTS+1]
new bool:knife
new bool:Adrenalized
new knife_check
new bool:wait
new AdrenWait
//----------------------------------------------------------------------------------------------
public plugin_init()
	{
	// Plugin Info
	register_plugin("SUPERHERO Adrenaline",".9","c3")
	
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("adrenaline_level", "5" )
	
	register_cvar("adrenaline_cooldown", "30" )
	register_cvar("adrenaline_lenth", "7" )
	register_cvar("adrenaline_healpoints", "50" )
	register_cvar("adrenaline_lenth_heal", "8")	
	register_cvar("adrenaline_wait", "10" )
	register_cvar("adrenaline_speed_mult", "2" )
	register_cvar("adrenaline_speed", "780")
	register_cvar("adrenaline_knife", "1")
	register_cvar("adrenaline_after_speed", "70")	
	register_cvar("adrenaline_after_lenth", "7")	
	
	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(gHeroName, "Adrenaline", "Press the +power key to adrenalinize your self!", true, "adrenaline_level" )
	
	
	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	register_event("ResetHUD","newRound","b")
	register_event("DeathMsg", "adrenaline_death", "a")
	
	//	register_event("Damage", "adrenaline_damage", "b", "2!0")
	
	// KEY DOWN
	register_srvcmd("adrenaline_kd", "adrenaline_kd")
	shRegKeyDown(gHeroName, "adrenaline_kd")
	
	
	// INIT
	register_srvcmd("adrenaline_init", "adrenaline_init")
	shRegHeroInit(gHeroName, "adrenaline_init")
	
	register_logevent("adren_wait", 2, "1=Round_Start")
	// DEATH
	
	
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
	{
	//smoke = precache_model("sprites/steam1.spr")
	
	
	precache_sound("/shmod/goku_powerup3.wav")
}
//----------------------------------------------------------------------------------------------
public adrenaline_init()
	{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)
	
	read_argv(2,temp,5)
	new hasPowers=str_to_num(temp)
	
	gHasAdrenalinePower[id] = (hasPowers!=0)
	
	if (gHasAdrenalinePower[id]) {
		gPlayerUltimateUsed[id] = false
	}
	
	NormalSpeed[id] = get_user_maxspeed(id)
	
	speed[id] = get_cvar_num("adrenaline_speed_mult")
	
	knife_check = get_cvar_num("adrenaline_knife")
	
	if(knife_check == 0){
		knife = false
		}else{
		knife = true 
	}

}
//------------------------------------------------------------------------------------------------------


public sound(id)
	{
	
	emit_sound(id, CHAN_STATIC, gSound, 1.0, ATTN_NORM, 0, PITCH_LOW)
	
	return PLUGIN_HANDLED
}

//----------------------------------------------------------------------------------------------
public adrenaline_death()
	{
	new id = read_data(2)
	Cooldown[id] = 0
	AdrenLenth[id] = 0
	if ( id <= 0 || id > SH_MAXSLOTS ) return
	Adrenalized = false
	remove_task(id)
}
//----------------------------------------------------------------------------------------------
public newRound(id)
	{

	AdrenLenth[id] = 0
	Cooldown[id] = 0
	Adrenalized = false

	remove_task(id)
}
//----------------------------------------------------------------------------------------------

public UsingUlt(id)
{
	
	NormalHealth[id] = get_user_health(id)
	
	HealPoints[id] = get_cvar_num("adrenaline_healpoints")
	LenthHeal[id] = get_cvar_num("adrenaline_lenth_heal") * 2
	
	AdrenLenth[id] = get_cvar_num("adrenaline_lenth")
	Adren_lenth(id)
	Afterlenth[id] = get_cvar_num("adrenaline_after_lenth")
	setspeed(id)
	adrenaline_heal(id)
	
}
//------------------------------------------------------------
public Adren_lenth(id)
	{
	
	if(!is_user_alive(id))
		{
		AdrenLenth[id] = 0
		return PLUGIN_HANDLED
	}
	
	if(AdrenLenth[id] != 0 ) {
		set_hudmessage(0, 0, 255, 0.35, 0.7, 0, 1.0, 1.0, 0.1, 0.2, 1)
		show_hudmessage(id, "Adrenalized %d", AdrenLenth[id])
		
	}
	
	Adrenalized = true
	
	AdrenLenth[id] -= 1
	
	if(AdrenLenth[id] <= 0)
		{
		shUnglow(id)
		Cooldown[id] = get_cvar_num("adrenaline_cooldown")
		UltCooldown(id)
		Afterlenth[id] = get_cvar_num("adrenaline_after_lenth")
		TakeSpeed(id)
		Adrenalized = false
		return PLUGIN_HANDLED
	}
	set_task(1.0, "Adren_lenth", id)
	
	return PLUGIN_HANDLED
}
//---------------------------------------------------------------------------
public setspeed(id)
	{
	
	
	if(!is_user_alive(id))
		{
		return PLUGIN_HANDLED
	}
	
	if(AdrenLenth[id] <= 0 ) 
		{
		AdrenLenth[id] = 0
		
	}
	
	
	if(AdrenLenth[id] > 0 )  {
		
		
		
		AdrenalineSpeed[id] = get_cvar_float("adrenaline_speed")
		
		set_user_maxspeed(id, AdrenalineSpeed[id])
	}
	set_task(1.0, "setspeed", id)
	
	return PLUGIN_HANDLED
	
}

//----------------------------------------------------------------
public TakeSpeed(id)
	{
	
	
	set_user_maxspeed(id, get_cvar_float("adrenaline_after_speed"))
	
	if(!is_user_alive(id))
		{
		Afterlenth[id] = 0
		return PLUGIN_HANDLED
	}
	
	if(Afterlenth[id] != 0 ) {
		set_hudmessage(0, 0, 255, 0.4, 0.7, 0, 1.0, 1.0, 0.1, 0.2, 3)
		show_hudmessage(id, "After Effect %d", Afterlenth[id])
	}

	
	Afterlenth[id] -= 1
	
	if(Afterlenth[id] <= 0)
		{
		set_user_maxspeed(id, NormalSpeed[id])
		return PLUGIN_HANDLED
	}
	
	set_task(1.0, "TakeSpeed", id)
	
	return PLUGIN_HANDLED
}


//----------------------------------------------------------------------------------------------

public adrenaline_heal(id)
	{	
	
	if(!is_user_alive(id))
		{
		LenthHeal[id] = 0
		return PLUGIN_HANDLED
	}
	
	if(LenthHeal[id] == 0 ) {
		
		reset_health(id)
	}
	
	if(LenthHeal[id] <= 0)
		{
		LenthHeal[id] = 0
		
		return PLUGIN_HANDLED
	}
	
	
	
	LenthHeal[id] -= 1
	
	
	for ( new id = 1; id <= SH_MAXSLOTS; id++ ) {
		if (  gHasAdrenalinePower[id] && is_user_alive(id))   {
			
			shAddHPs(id, HealPoints[id], 2000 )
		}
	}
	
	set_task(0.5 ,"adrenaline_heal",id)
	return PLUGIN_HANDLED
}

//--------------------------------------------------------------------------------
public reset_health(id)
	{
	
	if(!is_user_alive(id))
		{
		LenthHeal[id] = 0
		return PLUGIN_HANDLED
	}
	
	if(LenthHeal[id] == 0){
		
		set_user_health(id, NormalHealth[id])
		
		
	}
	return PLUGIN_HANDLED
}
//----------------------------------------------------------------------------------------------
public UltCooldown(id)
	{
	
	if(!is_user_alive(id))
		{
		Cooldown[id] = 0
		return PLUGIN_HANDLED
	}
	if ( Cooldown[id] != 0 ){
		set_hudmessage(255, 0, 0, 0.02, 0.89, 0, 2.0, 3.0, 0.1, 0.2, 4)
		show_hudmessage(id, "Adrenaline Cooldown %d", Cooldown[id] )
		}else{
		set_hudmessage(0, 255, 0, 0.02, 0.89, 0, 2.0, 3.0, 0.1, 0.2, 4)
		show_hudmessage(id, "Adrenaline Is READY!!")
	}
	
	if(Cooldown[id] <= 0)
		{
		Cooldown[id] = 0
		
		return PLUGIN_HANDLED
	}
	
	Cooldown[id] -= 1
	
	set_task(1.0, "UltCooldown", id)
	return PLUGIN_HANDLED
}



//----------------------------------------------------------------
public client_PreThink(id)
	{
	if(Adrenalized == true && gHasAdrenalinePower[id] == true )
		{
		new clip, ammo, wpnid = get_user_weapon(id,clip,ammo)
		
		if(knife == true && wpnid == CSW_KNIFE){
			new Float:vel[3],torigin[3],sorigin[3], mult = get_cvar_num("adrenaline_speed_mult");
			
			get_user_origin(id,torigin,2);
			get_user_origin(id,sorigin,0);
			
			torigin[0] -= sorigin[0];
			torigin[0] *= mult;
			
			torigin[1] -= sorigin[1];
			torigin[1] *= mult;
			
			new y_pull = -40 * 9	
			torigin[2] = y_pull
			
			IVecFVec(torigin,vel);
			
			entity_set_vector(id,EV_VEC_velocity,vel);

		}
		
	}
	
}
//---------------------------------------------------------------------------------
public adren_wait()
	{
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)
	
	//client_print(id, print_chat, "[SH](%s) adren wait has been called upon", gHeroName)
	
	AdrenWait = get_cvar_num("adrenaline_wait")
	if (AdrenWait > 0.0) {
		wait = true
		set_task(1.0 ,"adren_finish_wait", id)
	}
	
	
	
	return PLUGIN_HANDLED
}



//--------------------------------------------------------------------------------
public adren_finish_wait(id)
{

	if ( AdrenWait != 0 ){
		
	}

	AdrenWait -= 1
	
	if(AdrenWait <= 0)
	{
		//client_print(id, print_chat, "[SH] hero is ready ")
		AdrenWait = 0
		wait = false
		return PLUGIN_HANDLED
	}
	
	set_task(1.0, "adren_finish_wait", id)
	
	return PLUGIN_HANDLED
	
}
//-------------------------------------------------------------------------------------------
public adrenaline_kd()
	
{
	if ( !hasRoundStarted() ) return PLUGIN_HANDLED
	
	
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)
	if ( !is_user_alive(id) ) return PLUGIN_HANDLED
	
	

	if( wait == true) {
		
		playSoundDenySelect(id)
		set_hudmessage(0, 255, 0, 0.3, 0.7, 0, 1.0, 1.0, 0.1, 0.2, 1)
		show_hudmessage(id, "You have to wait %d seconds before u can use Adrenaline", AdrenWait)
		return PLUGIN_HANDLED
	}	
	
	
	
	if ( Cooldown[id] > 0 || AdrenLenth[id] > 0) {
		playSoundDenySelect(id)
		
		return PLUGIN_HANDLED
	}
	
	shGlow(id, 255, 5, 5)
	UsingUlt(id)
	sound(id)
	
	
	return PLUGIN_HANDLED
}

//----------------------------------------------------------------------------------------------
public client_disconnect(id)
	{
	
	if ( id <= 0 || id > SH_MAXSLOTS ) return
	
	
	remove_task(id)
	gHasAdrenalinePower[id] = false
}
//----------------------------------------------------------------------------------------------