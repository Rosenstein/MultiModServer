// Arctic Predator

/* CVARS - copy and paste to shconfig.cfg

//Arctic Predator
arcticPredator_level 0
arcticPredator_huntmode 10
arcticPredator_cooldown 5
arcticPredator_invisible 20
arcticPredator_explode_radius 600
arcticPredator_explode_maxdamage 250
*/

#include <amxmodx>
#include <superheromod>
#include <fun>
#include <engine>
#include <cstrike>
#include <fakemeta>


// GLOBAL VARIABLES
new g_discID[SH_MAXSLOTS+1]
new g_huntTimer[SH_MAXSLOTS+1]
new gHeroName[]="Arctic Predator"
new bool:gHasArcPredPowers[SH_MAXSLOTS+1]
new gAlphaInvis
new lastweap[33]
new lastammo[33]
new spr_laser
new spr_laser_impact
new blast_shroom
new bool:NightVisionUse[SH_MAXSLOTS+1]
#define TASKID 532221
new NVGToggle = 0
new smoke, white, fire
new bool:discThrown[SH_MAXSLOTS+1]
new killer[SH_MAXSLOTS+1]
new g_spriteBlood, g_spriteBldSpray
new bool:gHuntMode[SH_MAXSLOTS+1]
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Arctic Predator","1.1","duper")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("arcticPredator_level", "20" )
	register_cvar("arcticPredator_invisible", "20")
	register_cvar("arcticPredator_explode_radius", "500" )
	register_cvar("arcticPredator_explode_maxdamage", "190" )
	register_cvar("arcticpredator_discspeed", "1200" )
	register_cvar("arcticpredator_discreturntime", "1.0")
	register_cvar("arcticpredator_discdmg", "60" )
	register_cvar("arcticPredator_huntmode", "10" )
	register_cvar("arcticPredator_cooldown", "30" )

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(gHeroName, "Hunter", "Invisble Hunt Mode, Press N to toggle Hunter Helmet Power, Throw Predator Disc.", true, "arcticPredator_level" )

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	register_event("ResetHUD","newRound","b")
	register_event("CurWeapon", "weaponChange", "be", "1=1")
	register_event("DeathMsg","death","a")
	register_event("Damage", "predator_damage", "b", "2!0")

	register_touch("pred_disc", "player", "touch_event")

	register_clcmd("nightvision","ToggleNVG")
	NVGToggle = get_user_msgid("NVGToggle")

	// INIT
	register_srvcmd("arcticPredator_init", "arcticPredator_init")
	shRegHeroInit(gHeroName, "arcticPredator_init")
	register_srvcmd("arcticPredator_loop", "arcticPredator_loop")
	register_forward(FM_TraceLine,"fw_traceline");
	set_task(1.0,"arcticPredator_loop",0,"",0,"b" )
	set_task(0.1, "Revenge_Tracker", 0, "", 0, "b")
	register_event("CurWeapon", "make_tracer", "be", "1=1", "3>0")

	register_srvcmd("arcticPredator_kd", "arcticPredator_kd")
	shRegKeyDown(gHeroName, "arcticPredator_kd")

	register_forward(FM_PlayerPreThink, "disc_throw_check")
}
//----------------------------------------------------------------------------------------------
public arcticPredator_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id=str_to_num(temp)

	// 2nd Argument is 0 or 1 depending on whether the id has GreenLantern
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)

	if ( !hasPowers )
	{
		g_huntTimer[id]=0
	}
	gHasArcPredPowers[id] = (hasPowers!=0)
	gAlphaInvis = get_cvar_num("arcticPredator_invisible")
	pred_Morph(id)
	switchgun(id)
	arcpredator_weapons(id)
	discThrown[id] = false
	gHuntMode[id] = false
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	precache_model("models/player/arcpred/arcpred.mdl")
	precache_model("models/player/arcpredct/arcpredct.mdl")
	precache_model("models/shmod/predgun/predknife.mdl")
	precache_model("models/shmod/predgun/predawp.mdl")
	precache_model("models/shmod/predgun/preddisc.mdl")
	precache_model("models/shmod/predgun/p_predgun.mdl")
	precache_model("models/shmod/predgun/v_predgun.mdl")
	precache_sound("weapons/electro5.wav")
	precache_sound( "items/tr_kevlar.wav")
	precache_sound( "ambience/disgusting.wav" )
	spr_laser = precache_model("sprites/laserbeam.spr")
	spr_laser_impact = precache_model("sprites/zerogxplode.spr")
	blast_shroom = precache_model("sprites/mushroom.spr")
	smoke = precache_model("sprites/steam1.spr")
	white = precache_model("sprites/shockwave.spr")
	fire = precache_model("sprites/zerogxplode.spr")
	g_spriteBlood = precache_model("sprites/blood.spr")
	g_spriteBldSpray = precache_model("sprites/bloodspray.spr")
}
//----------------------------------------------------------------------------------------------
public arcticPredator_loop()
{
	for ( new id=1; id<=SH_MAXSLOTS; id++ )
	{
		if ( gHasArcPredPowers[id] && is_user_alive(id)  )
		{
			if ( g_huntTimer[id]>0 )
			{
				g_huntTimer[id]--
				new message[128]
				format(message, 127, "%d seconds left in hunt mode", g_huntTimer[id] )
				set_user_rendering(id,kRenderFxGlowShell,0,0,0,10,gAlphaInvis)
				set_hudmessage(0,0,255,-1.0,0.3,0,1.0,1.0,0.0,0.0,4)
				show_hudmessage( id, message)
			}
			else
			{
				if ( g_huntTimer[id] == 0 || !is_user_alive(id) )
				{
					hunt_endmode(id)
				}
			}
		}
	}
}
//----------------------------------------------------------------------------------------------
public hunt_endmode(id)
{
	if ( gHuntMode[id] == true )
	{
		g_huntTimer[id]=0
		set_user_rendering(id,kRenderFxGlowShell,0,0,0,10,255)
		StopNVG(id)
		gHuntMode[id] = false
	}
}
//----------------------------------------------------------------------------------------------
public arcticPredator_kd()
{
	new temp[6]

	// First Argument is an id with colussus Powers!
	read_argv(1,temp,5)
	new id=str_to_num(temp)

	if ( !is_user_alive(id) ) return PLUGIN_HANDLED

	// Let them know they already used their ultimate if they have
	if ( gPlayerUltimateUsed[id] ) {
		playSoundDenySelect(id)
		return PLUGIN_HANDLED
	}

	// Make sure they're not in the middle of GOD already
	if ( g_huntTimer[id]>0 ) return PLUGIN_HANDLED

	g_huntTimer[id]=get_cvar_num("arcticPredator_huntmode")+1
	StopNVG(id)
	ToggleNVG(id)
	ultimateTimer(id, get_cvar_num("arcticPredator_cooldown") * 1.0)

	gHuntMode[id] = true
	// colussus Messsage
	new message[128]
	format(message, 127, "Entered Hunting Mode" )
	set_hudmessage(255,0,255,-1.0,0.3,0,0.25,1.0,0.0,0.0,4)
	show_hudmessage(id, message)
	//  emit_sound(id,CHAN_STATIC, g_colussusSound, 0.1, ATTN_NORM, 0, PITCH_LOW)

	return PLUGIN_HANDLED
}
//----------------------------------------------------------------------------------------------
public newRound(id)
{
	new disc = find_ent_by_class(-1, "pred_disc")
	while(disc) {
		remove_entity(disc)
		disc = find_ent_by_class(disc, "pred_disc")
	}
	if ( gHasArcPredPowers[id] && is_user_alive(id) && shModActive() ) {
		gPlayerUltimateUsed[id]=false
		discThrown[id] = false
		set_task(0.1, "arcpredator_weapons", id+1884)
		pred_Morph(id)
		switchgun(id)
		arcpredator_weapons(id)
		g_huntTimer[id] = 0
	}
	return PLUGIN_HANDLED
}
//-----------------------------------------------------------------------------------------------
pred_Morph(id)
{
	if ( gHasArcPredPowers[id] == false && is_user_connected(id) )
	{
		cs_reset_user_model(id)
		return PLUGIN_HANDLED
	}
	if ( gHasArcPredPowers[id] == true && is_user_connected(id) )
	{

		if ( get_user_team(id) == 1 )
		{
			cs_set_user_model(id, "arcpredct")
		}
		if ( get_user_team(id) == 2 )
		{
			cs_set_user_model(id, "arcpred")
		}
	}
	return PLUGIN_HANDLED
}
//-----------------------------------------------------------------------------------------------
public switchgun(id)
{
	if ( !is_user_alive(id) || !gHasArcPredPowers[id] ) return
	new clip, ammo, wpnid = get_user_weapon(id,clip,ammo)
	if (wpnid == CSW_AWP) {
		// Weapon Model change thanks to [CCC]Taz-Devil
		entity_set_string(id, EV_SZ_viewmodel, "models/shmod/predgun/predawp.mdl")
		entity_set_string(id, EV_SZ_weaponmodel, "")
	}
	if (wpnid == CSW_SCOUT) {
		// Weapon Model change thanks to [CCC]Taz-Devil
		entity_set_string(id, EV_SZ_viewmodel, "models/shmod/predgun/v_predgun.mdl")
		entity_set_string(id, EV_SZ_weaponmodel, "models/shmod/predgun/p_predgun.mdl")
	}
	if (wpnid == CSW_KNIFE) {
		// Weapon Model change thanks to [CCC]Taz-Devil
		entity_set_string(id, EV_SZ_viewmodel, "models/shmod/predgun/predknife.mdl")
	}
}
//-----------------------------------------------------------------------------------------------
public weaponChange(id)
{
	if ( !gHasArcPredPowers[id] || !shModActive() ) return

	new wpnid = read_data(2)
	new clip = read_data(3)

	if ( wpnid != CSW_AWP && wpnid != CSW_KNIFE && wpnid != CSW_SCOUT )
	{
		return
	}

	switchgun(id)

	// Never Run Out of Ammo!
	if ( clip == 0 ) {
		shReloadAmmo(id)
	}
}
//-----------------------------------------------------------------------------------------------
public arcpredator_weapons(id)
{
	if ( is_user_alive(id) ) {
		shGiveWeapon(id,"weapon_awp")
		shGiveWeapon(id,"weapon_scout")
	}
}
//-----------------------------------------------------------------------------------------------
public ToggleNVG(id)
{
	if ( !shModActive() || !gHasArcPredPowers[id] || !is_user_alive(id) ) return PLUGIN_CONTINUE

	if (NightVisionUse[id])		StopNVG(id)
	else						StartNVG(id)

	return PLUGIN_HANDLED
}
//----------------------------------------------------------------------------------------------
public StartNVG(id)
{
	if ( !gHasArcPredPowers[id] || !shModActive() || !is_user_alive(id) ) return

	message_begin(MSG_ONE, NVGToggle, {0,0,0}, id)
	write_byte( 0 )
	message_end()

	NightVisionUse[id] = true

	emit_sound(id,CHAN_ITEM,"items/nvg_on.wav",VOL_NORM,ATTN_NORM,0,PITCH_NORM)
	if (g_huntTimer[id] == 0 ) set_task(0.1,"RunNVG",id,"",0,"b")
	if (g_huntTimer[id] > 0 ) set_task(0.1,"RunRedNVG",id,"",0,"b")
}
//----------------------------------------------------------------------------------------------
public StopNVG(id)
{
	emit_sound(id,CHAN_ITEM,"items/nvg_off.wav",VOL_NORM,ATTN_NORM,0,PITCH_NORM)
	remove_task(id)
	NightVisionUse[id] = false
}
//----------------------------------------------------------------------------------------------
public RunNVG(id)
{
	if (!is_user_alive(id) || !NightVisionUse[id]) {
		StopNVG(id)
		return
	}

	new origin[3]
	get_user_origin(id,origin)

	//NVG Entity
	message_begin(MSG_ONE,SVC_TEMPENTITY,{0,0,0},id)
	write_byte(27)			//entity type
	write_coord(origin[0])	//x
	write_coord(origin[1])	//y
	write_coord(origin[2])	//z
	write_byte(125)		//visible distance
	write_byte(255)			//red
	write_byte(255)			//blue
	write_byte(0)			//green
	write_byte(3)			//deciseconds
	write_byte(10)			//distance flicker
	message_end()

	//Darkens it a little
	setScreenFlash(id, 0, 10, 250, 12, 100)
}
public RunRedNVG(id)
{
	if (!is_user_alive(id) || !NightVisionUse[id]) {
		StopNVG(id)
		return
	}

	new origin[3]
	get_user_origin(id,origin)

	//NVG Entity
	message_begin(MSG_ONE,SVC_TEMPENTITY,{0,0,0},id)
	write_byte(27)			//entity type
	write_coord(origin[0])	//x
	write_coord(origin[1])	//y
	write_coord(origin[2])	//z
	write_byte(125)		//visible distance
	write_byte(200)			//red
	write_byte(0)			//blue
	write_byte(0)			//green
	write_byte(3)			//deciseconds
	write_byte(10)			//distance flicker
	message_end()

	//Darkens it a little
	setScreenFlash(id, 180, 10, 0, 12, 50)
}
//----------------------------------------------------------------------------------------------
public death()
{
	new id = read_data(2)
	killer[id] = read_data(1)
	g_huntTimer[id] = 0
	gPlayerUltimateUsed[id]=false
	set_task(0.1, "arcpredator_weapons", id)
	if ( gHasArcPredPowers[id] )
	{
		BlowUp(id)
		gHuntMode[id] = false
	}
	if ( killer[id] != id ) {
		new namea[24]
		get_user_name(killer[id],namea,23)
		if ( gHasArcPredPowers[id] ) {
			client_print(id,print_chat,"[SH Predator] Tracking %s next round, hunt him down.", namea)
		}
	}
	else {
		killer[id] = 0
	}
}
//----------------------------------------------------------------------------------------------
public make_tracer(id)
{
	if ( !gHasArcPredPowers[id] ) return PLUGIN_CONTINUE

	new weap = read_data(2)        // id of the weapon
	new ammo = read_data(3)        // ammo left in clip

	if ( gHasArcPredPowers[id] && weap == CSW_SCOUT && is_user_alive(id) ) {

		if (lastweap[id] == 0) lastweap[id] = weap

		if ((lastammo[id] > ammo) && (lastweap[id] == weap)) {

			new vec1[3], vec2[3]
			get_user_origin(id, vec1, 1) // origin; where you are
			get_user_origin(id, vec2, 4) // termina; where your bullet goes

			// tracer beam
			message_begin(MSG_PAS, SVC_TEMPENTITY, vec1)
			write_byte(0)        // TE_BEAMPOINTS
			write_coord(vec1[0])
			write_coord(vec1[1])
			write_coord(vec1[2])
			write_coord(vec2[0])
			write_coord(vec2[1])
			write_coord(vec2[2])
			write_short(spr_laser)    // laserbeam sprite
			write_byte(0)        // starting frame
			write_byte(10)        // frame rate
			write_byte(2)        // life in 0.1s
			write_byte(4)        // line width in 0.1u
			write_byte(1)        // noise in 0.1u
			write_byte(153)        // red
			write_byte(0)      // green
			write_byte(0)        // blue
			write_byte(80)        // brightness
			write_byte(100)        // scroll speed
			message_end()

			// bullet impact explosion
			message_begin(MSG_PAS, SVC_TEMPENTITY, vec2)
			write_byte(3)        // TE_EXPLOSION
			write_coord(vec2[0])    // end point of beam
			write_coord(vec2[1])
			write_coord(vec2[2])
			write_short(spr_laser_impact)    // blast sprite
			write_byte(10)            // scale in 0.1u
			write_byte(30)            // frame rate
			write_byte(8)            // TE_EXPLFLAG_NOPARTICLES
			message_end()            // ..unless i'm mistaken, noparticles helps avoid a crash
		}
		lastammo[id] = ammo
		lastweap[id] = weap

		return PLUGIN_CONTINUE

	}
	if ( gHasArcPredPowers[id] && weap == CSW_AWP && is_user_alive(id) )
	{
		if (lastweap[id] == 0) lastweap[id] = weap

		if ((lastammo[id] > ammo) && (lastweap[id] == weap)) {
			{
				new vec1[3], vec2[3]
				get_user_origin(id, vec1, 1) // origin; where you are
				get_user_origin(id, vec2, 4) // termina; where your bullet goes

				// tracer beam
				message_begin(MSG_PAS, SVC_TEMPENTITY, vec1)
				write_byte(0)		// TE_BEAMPOINTS
				write_coord(vec1[0])
				write_coord(vec1[1])
				write_coord(vec1[2])
				write_coord(vec2[0])
				write_coord(vec2[1])
				write_coord(vec2[2])
				write_short(spr_laser)	// laserbeam sprite
				write_byte(0)		// starting frame
				write_byte(10)		// frame rate
				write_byte(2)		// life in 0.1s
				write_byte(4)		// line width in 0.1u
				write_byte(1)		// noise in 0.1u
				write_byte(200)		// red
				write_byte(200)		// green
				write_byte(200)		// blue
				write_byte(80)		// brightness
				write_byte(100)		// scroll speed
				message_end()

				// bullet impact explosion
				message_begin(MSG_PAS, SVC_TEMPENTITY, vec2)
				write_byte(3)		// TE_EXPLOSION
				write_coord(vec2[0])	// end point of beam
				write_coord(vec2[1])
				write_coord(vec2[2])
				write_short(spr_laser_impact)	// blast sprite
				write_byte(10)			// scale in 0.1u
				write_byte(30)			// frame rate
				write_byte(8)			// TE_EXPLFLAG_NOPARTICLES
				message_end()			// ..unless i'm mistaken, noparticles helps avoid a crash

			}
		}

	}
	lastammo[id] = ammo
	lastweap[id] = weap

	return PLUGIN_CONTINUE
}
//-----------------------------------------------------------------------------------------------
public predator_damage(id)
{
	new damage = read_data(2)
	new weapon, bodypart, attacker = get_user_attacker(id, weapon, bodypart)
	new headshot = bodypart == 1 ? 1 : 0

	if ( attacker <= 0 || attacker > SH_MAXSLOTS ) return PLUGIN_CONTINUE

	if ( gHasArcPredPowers[attacker] && weapon == CSW_SCOUT && is_user_alive(id) && ( g_huntTimer[attacker] > 0 ) )
	{
		new health = get_user_health(id)

		// damage is less than 10%
		if ( ( (1.0 * damage) / (1.0 * (health + damage) ) ) < 0.01 ) return PLUGIN_CONTINUE

		new origin[3]
		get_user_origin(id, origin)

		// player fades..
		set_user_rendering(id, kRenderFxFadeSlow, 255, 255, 255, kRenderTransColor, 4);

		// beeeg explody!
		message_begin(MSG_ALL, SVC_TEMPENTITY)
		write_byte(3)			// TE_EXPLOSION
		write_coord(origin[0])
		write_coord(origin[1])
		write_coord(origin[2]-22)
		write_short(blast_shroom)	// mushroom cloud
		write_byte(40)			// scale in 0.1's
		write_byte(12)			// frame rate
		write_byte(12)			// TE_EXPLFLAG_NOPARTICLES & TE_EXPLFLAG_NOSOUND
		message_end()

		// do turn down that awful racket..to be replaced by a blood spurt!
		message_begin(MSG_ALL, SVC_TEMPENTITY)
		write_byte(10)	// TE_LAVASPLASH
		write_coord(origin[0])
		write_coord(origin[1])
		write_coord(origin[2]-26)
		message_end()

		// do extra damage
		new extraDamage = 1000
		shExtraDamage( id, attacker, extraDamage, "predator gun", headshot )
	}
	return PLUGIN_CONTINUE
}

//-----------------------------------------------------------------------------------------------
public explode( vec1[3] )
{
	// blast circles
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY,vec1)
	write_byte( 21 )
	write_coord(vec1[0])
	write_coord(vec1[1])
	write_coord(vec1[2] + 16)
	write_coord(vec1[0])
	write_coord(vec1[1])
	write_coord(vec1[2] + 1936)
	write_short( white )
	write_byte( 0 ) // startframe
	write_byte( 0 ) // framerate
	write_byte( 2 ) // life 2
	write_byte( 60 ) // width 16
	write_byte( 0 ) // noise
	write_byte( 20 ) // r
	write_byte( 20 ) // g
	write_byte( 250 ) // b
	write_byte( 255 ) //brightness
	write_byte( 0 ) // speed
	message_end()

	//Explosion2
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte( 12 )
	write_coord(vec1[0])
	write_coord(vec1[1])
	write_coord(vec1[2])
	write_byte( 188 ) // byte (scale in 0.1's) 188
	write_byte( 10 ) // byte (framerate)
	message_end()

	//TE_Explosion
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY,vec1)
	write_byte( 3 )
	write_coord(vec1[0] + random_num( -100, 100 ))
	write_coord(vec1[1] + random_num( -100, 100 ))
	write_coord(vec1[2]+ random_num( -50, 50 ))
	write_short( fire )
	write_byte(  random_num(0,20) + 20  ) // byte (scale in 0.1's) 188
	write_byte( 12 ) // byte (framerate)
	write_byte( 0 ) // byte flags
	message_end()

	//Smoke
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY,vec1)
	write_byte( 5 ) // 5
	write_coord(vec1[0] + random_num( -100, 100 ))
	write_coord(vec1[1] + random_num( -100, 100 ))
	write_coord(vec1[2] + random_num( -50, 50 ))
	write_short( smoke )
	write_byte( 60 )  // 2
	write_byte( 10 )  // 10
	message_end()
}
//----------------------------------------------------------------------------------------------
public BlowUp(id)
{
	new Float:dRatio, damage, distanceBetween
	new damradius = get_cvar_num("arcticPredator_explode_radius")
	new maxdamage = get_cvar_num("arcticPredator_explode_maxdamage")

	new name[32]
	get_user_name(id,name,31)
	shUnglow(id)
	set_hudmessage(0, 100, 200, 0.05, 0.65, 2, 0.02, 1.0, 0.01, 0.1, 85)
	show_hudmessage(0,"%s has exploded.",name)
	new FFOn = get_cvar_num("mp_friendlyfire")
	new origin[3], origin1[3]
	get_user_origin(id,origin)

	explode(origin) // blowup even if dead

	for(new a = 1; a <= SH_MAXSLOTS; a++) {
		if( is_user_alive(a) && ( get_user_team(id) != get_user_team(a) || FFOn || a == id ) ) {

			get_user_origin(a,origin1)

			distanceBetween = get_distance(origin, origin1 )
			if( distanceBetween < damradius ) {
				if ( a == id ) {
					damage = maxdamage * 4
				}
				else {
					dRatio = float(distanceBetween) / float(damradius)
					damage = maxdamage - floatround( maxdamage * dRatio)
				}
				shExtraDamage(a, id, damage, "Self Destruction")
			} // distance
		} // alive
	} // loop
}
//----------------------------------------------------------------------------------------------
public Revenge_Tracker()
{
	for ( new id = 1; id <= SH_MAXSLOTS; id++ )
	{
		if ( gHasArcPredPowers[id] && is_user_alive(id) && is_user_connected(id) && NightVisionUse[id] == true && killer[id] != 0 && killer[id] < 33 && killer[id] > 0 )
		{
			new distance, origin[3], eorigin[3]

			get_user_origin(id, origin)

			get_user_origin(killer[id], eorigin)

			distance = get_distance(eorigin, origin)

			new namea[24]
			get_user_name(killer[id],namea,23)

			new messagethree[128]
			format(messagethree, 127, "Distance to hunted %s: %d", namea, distance )
			set_hudmessage(255, 0, 0, 0.01, 0.27, 1, 6.0, 0.5, 0.1, 0.1, 155)
			show_hudmessage( id, messagethree)
		}
	}
}
//----------------------------------------------------------------------------------------------
public disc_throw_check(id)
{
	if(is_user_alive(id) && gHasArcPredPowers[id] )
	{
		new clip, ammo, wpnid = get_user_weapon(id,clip,ammo)
		if (entity_get_int(id, EV_INT_button) & IN_USE && wpnid == CSW_KNIFE && discThrown[id] == false )
		{
			throw_disc(id)
			return FMRES_IGNORED
		}
	}
	return FMRES_IGNORED
}
//----------------------------------------------------------------------------------------------
public throw_disc(id)
{

	g_discID[id] = create_entity("info_target")

	if ( g_discID[id] == 0 ) {
		client_print(id, print_chat, "[SH](Arctic Predator) Power Creation Failure")
		return
	}

	discThrown[id] = true

	new Float:b_orig[3]
	//Spawning soccer infront of a player
	new originplayer[3], originlook[3], aimvec[3]

	get_user_origin(id, originplayer)
	get_user_origin(id, originlook, 2)


	new distance[2]

	distance[0] = originlook[0]-originplayer[0]
	distance[1] = originlook[1]-originplayer[1]

	new unitsinfront = 80

	aimvec[0]=originplayer[0]+(unitsinfront*distance[0])/sqrt(distance[0]*distance[0]+distance[1]*distance[1])
	aimvec[1]=originplayer[1]+(unitsinfront*distance[1])/sqrt(distance[0]*distance[0]+distance[1]*distance[1])
	aimvec[2]=originplayer[2]-8

	b_orig[0] = float(aimvec[0]);
	b_orig[1] = float(aimvec[1]);
	b_orig[2] = float(aimvec[2]);

	g_discID[id] = create_entity("info_target")
	entity_set_string(g_discID[id], EV_SZ_classname, "pred_disc")


	entity_set_model(g_discID[id], "models/shmod/predgun/preddisc.mdl")

	entity_set_origin(g_discID[id], b_orig)
	//entity_set_float(g_discID[id],EV_FL_health,500.0)
	//entity_set_float(g_discID[id], EV_FL_takedamage, 1.0)

	new Float:MinBox[3]
	new Float:MaxBox[3]
	MinBox[0] = -10.0
	MinBox[1] = -10.0
	MinBox[2] = -10.0
	MaxBox[0] = 10.0
	MaxBox[1] = 10.0
	MaxBox[2] = 10.0
	entity_set_vector(g_discID[id],EV_VEC_mins, MinBox)
	entity_set_vector(g_discID[id],EV_VEC_maxs, MaxBox)


	//Sets who the owner of the entity is
	entity_set_edict(g_discID[id], EV_ENT_owner, id)

	entity_set_int(g_discID[id], EV_INT_solid, SOLID_TRIGGER)
	entity_set_int(g_discID[id],EV_INT_movetype, MOVETYPE_NOCLIP)
	/*
	new Float:fNewVelocity[3]
	new Float:newAngle[3]

	VelocityByAim(id, 390, fNewVelocity)
	fNewVelocity[2] = 0.0
	vector_to_angle(fNewVelocity, newAngle);

	entity_set_vector(g_discID[id], EV_VEC_angles, newAngle)
	entity_set_vector(g_discID[id], EV_VEC_velocity, fNewVelocity)
	*/

	new velocity[3]
	new Float:fVelocity[3]
	//This will set the velocity of the entity
	velocity_by_aim(id, get_cvar_num("arcticpredator_discspeed"), fVelocity)
	FVecIVec(fVelocity, velocity) //converts a floating vector to an integer vector

	//This will set the entity in motion
	entity_set_vector(g_discID[id], EV_VEC_velocity, fVelocity)

	new parm[2]
	parm[0] = g_discID[id]
	parm[1] = id

	set_task(get_cvar_float("arcticpredator_discreturntime"), "return_disc_pause", g_discID[id] , parm , 2)
}
//----------------------------------------------------------------------------------------------
public return_disc_pause(parm[])
{
	new grenadeID = parm[0]

	set_task(0.1, "return_disc", grenadeID+1000, parm, 3, "b")
}
//----------------------------------------------------------------------------------------------
public return_disc(parm2[])
{

	new disc = parm2[0]
	new disc_owner = parm2[1]

	if ( !is_valid_ent(disc) ) {
		remove_task(disc+1000)
		return
	}

	if ( !is_valid_ent(disc) ) {
		remove_task(disc+1000)
		return
	}

	if ( is_user_alive(disc_owner) && discThrown[disc_owner] == true ) {
		entity_set_follow(disc, disc_owner)
	}
	else {
		// Remove the seek loop
		remove_task(disc+1000)
		remove_entity(disc)
		discThrown[disc_owner] = false
	}
}
//----------------------------------------------------------------------------------------------
stock entity_set_follow(entity, target)
{
	if ( !is_valid_ent(entity) || !is_user_alive(target) ) return 0

	new Float:fl_Origin[3], Float:fl_EntOrigin[3]
	entity_get_vector(target, EV_VEC_origin, fl_Origin)
	entity_get_vector(entity, EV_VEC_origin, fl_EntOrigin)

	new Float:gDiscSpeed = get_cvar_float("arcticpredator_discspeed")
	new Float:fl_InvTime = (gDiscSpeed / vector_distance(fl_Origin, fl_EntOrigin))

	new Float:fl_Distance[3]
	fl_Distance[0] = fl_Origin[0] - fl_EntOrigin[0]
	fl_Distance[1] = fl_Origin[1] - fl_EntOrigin[1]
	fl_Distance[2] = fl_Origin[2] - fl_EntOrigin[2]

	new Float:fl_Velocity[3]
	fl_Velocity[0] = fl_Distance[0] * fl_InvTime
	fl_Velocity[1] = fl_Distance[1] * fl_InvTime
	fl_Velocity[2] = fl_Distance[2] * fl_InvTime

	entity_set_vector(entity, EV_VEC_velocity, fl_Velocity)

	new Float:fl_NewAngle[3]
	vector_to_angle(fl_Velocity, fl_NewAngle)
	entity_set_vector(entity, EV_VEC_angles, fl_NewAngle)

	return 1
}
//----------------------------------------------------------------------------------------------
public touch_event(pToucher, pTouched)  //This is triggered when two entites touch
{
	if ( pTouched == entity_get_edict(pToucher, EV_ENT_owner) )
	{
		remove_entity(pToucher)
		discThrown[pTouched] = false
		client_print(pTouched, print_chat, "[SH] Arctic Predator: Disc returned")
	}
	else
	{
		new killer = entity_get_edict(pToucher, EV_ENT_owner)
		new damage = get_cvar_num("arcticpredator_discdmg")
		new victim = pTouched
		new vicOrigin[3]
		new ffOn = get_cvar_num("mp_friendlyfire")
		if ( (get_user_team(victim) != get_user_team(killer)) || ffOn )
		{
			shExtraDamage(victim, killer, damage, "Predator's Hunter Disc")
			get_user_origin(victim, vicOrigin)
			blood_spray(victim, vicOrigin)
		}

	}
}
//----------------------------------------------------------------------------------------------
public fw_traceline(Float:v1[3],Float:v2[3],noMonsters,id)
{
	if(!is_user_alive(id))
	return FMRES_IGNORED;

	if(!gHasArcPredPowers[id])
	return FMRES_IGNORED;
	new clip, ammo, wpnid = get_user_weapon(id,clip,ammo)
	
	if(wpnid != CSW_AWP)
	return FMRES_IGNORED;

	// get crosshair aim
	new MyAim[3], Float:flMyAim[3];
	get_user_origin(id,MyAim,3);
	IVecFVec(MyAim,flMyAim);

	// set crosshair aim
	set_tr(TR_vecEndPos,flMyAim);

	// get ent looking at
	new ent, body;
	get_user_aiming(id,ent,body);

	// if looking at something
	if(is_valid_ent(ent)) {
		set_tr(TR_flFraction,0.1); // 1.0 == no hit, < 1.0 == hit
		set_tr(TR_pHit,ent); // entity hit
		set_tr(TR_iHitgroup,body); // bodypart hit
	}

	return FMRES_IGNORED;
}
//----------------------------------------------------------------------------------------------
public blood_spray(vic, vicOrigin[3])
{
	new x, y
	for(new i = 0; i < 2; i++) {
		x = random_num(-10, 10)
		y = random_num(-10, 10)
		for(new j = 0; j < 2; j++) {
			// Blood spray
			message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
			write_byte(115)				// TE_BLOODSPRITE
			write_coord(vicOrigin[0]+(x*j))	// position
			write_coord(vicOrigin[1]+(y*j))
			write_coord(vicOrigin[2]+21)
			write_short(g_spriteBldSpray)	// sprite1 index
			write_short(g_spriteBlood)	// sprite2 index
			write_byte(248) 			// color RED = 248 YELLOW = 196
			write_byte(10) 			// scale
			message_end()
		}
	}
}
//----------------------------------------------------------------------------------------------