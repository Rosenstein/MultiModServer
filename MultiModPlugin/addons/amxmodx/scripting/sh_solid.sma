// SOLID SNAKE! - You can use rations on keydown to healing, you have Snake's appearance, stealth camouflage and Socom instead USP

/* CVARS - copy and paste to shconfig.cfg

// Solid Snake
solid_level 7
solid_stealth 2				// 0 = don't use stealth camouflage,  1 = use stealth everytime, 2 = use stealth with level limit
solid_stealth_level 10		// The level, needed to stealth camouflage (only if "solid_stealth" == 2)
solid_rations 5				// How many rations do you have? (-1 to unlimited)
solid_ration_health 50		// How many health you have per ration?

*/

#include <amxmodx>
#include <superheromod>
#include <cstrike>
#include <fakemeta>
#include <fun>

new gHeroName[] = "Solid Snake"
new bool:gHasSolidPower[SH_MAXSLOTS+1]
new bool:gMorphed[SH_MAXSLOTS+1]
new gPlayerLevels[SH_MAXSLOTS+1]
new gMaxHealth[SH_MAXSLOTS+1]
new Rations[SH_MAXSLOTS+1]
// CVARS
new stealthMode, lvlStealth, maxRations, healthRation

//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Solid Snake", "1.0", "NOmeR1")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("solid_level", "7")
	register_cvar("solid_stealth", "2")
	register_cvar("solid_stealth_level", "10")
	register_cvar("solid_rations", "5")
	register_cvar("solid_ration_health", "50")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(gHeroName, "Rations, Stealth, Snake's appearance, Socom", "You can use rations on keydown to healing, you have Snake's body, stealth camouflage and Socom instead USP", true, "solid_level")

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	register_logevent("round_start", 2, "1=Round_Start")
	register_event("CurWeapon", "weapon_change", "be", "1=1")
	register_event("Damage", "solid_damage", "b", "2!0")

	// INIT
	register_srvcmd("solid_init", "solid_init")
	shRegHeroInit(gHeroName, "solid_init")

	// LEVELS
	register_srvcmd("solid_levels", "solid_levels")
	shRegLevels(gHeroName, "solid_levels")

	// KEYDOWN
	register_srvcmd("solid_kd", "solid_kd")
	shRegKeyDown(gHeroName, "solid_kd")

}
//----------------------------------------------------------------------------------------------
public solid_init()
{

	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	// 2nd Argument is 0 or 1 depending on whether the id has Solid Snake
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)

	if(!is_user_connected(id) || !shModActive()) return

	gHasSolidPower[id] = (hasPowers != 0)

	if(gHasSolidPower[id])
	{
		solid_morph(id)
	}
	else
	{
		solid_unmorph(id)
	}

}
//----------------------------------------------------------------------------------------------
public plugin_cfg()
{
    loadCVARS()
}
//----------------------------------------------------------------------------------------------
public loadCVARS()
{
	stealthMode = get_cvar_num("solid_stealth")
	lvlStealth = get_cvar_num("solid_stealth_level")
	maxRations = get_cvar_num("solid_rations")
	healthRation = get_cvar_num("solid_ration_health")
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	precache_sound("shmod/ration.wav")
	precache_model("models/shmod/socom_v.mdl")
	precache_model("models/shmod/socom_p.mdl")
	precache_model("models/player/solid/solid.mdl")
}
//----------------------------------------------------------------------------------------------
public solid_levels()
{
	new id[5]
	new lev[5]

	read_argv(1,id,4)
	read_argv(2,lev,4)

	gPlayerLevels[str_to_num(id)] = str_to_num(lev)
}
//----------------------------------------------------------------------------------------------
public weapon_change(id)
{
	if(gHasSolidPower[id] && shModActive())
	{
		new wpnid = read_data(2)

		if(wpnid == CSW_USP)
		{
			setSocom(id)
		}
	}
	return PLUGIN_HANDLED
}
//----------------------------------------------------------------------------------------------
public setSocom(id)
{
    if(shModActive() && is_user_alive(id) && gHasSolidPower[id])
	{
	    new clip, ammo, wpnid = get_user_weapon(id, clip, ammo)

	    if(wpnid == CSW_USP)
	    {
			set_pev(id, pev_viewmodel2, "models/shmod/socom_v.mdl")
			set_pev(id, pev_weaponmodel2, "models/shmod/socom_p.mdl")
	    }
	}
}
//----------------------------------------------------------------------------------------------
public round_start()
{
	if(!shModActive()) return

	for(new x = 1; x <= SH_MAXSLOTS; x++)
	{
		if(is_user_alive(x))
		{
			if(gHasSolidPower[x])
			{
				gMaxHealth[x] = get_user_health(x)
				Rations[x] = maxRations
				if((stealthMode == 1) || (stealthMode == 2 && gPlayerLevels[x] >= lvlStealth))
				{
					set_task(1.0, "stealthInvisible", x, "", 0, "b")
				}
				giveSocom(x)
				setSocom(x)
				solid_morph(x)
			}
			else
			{
				solid_unmorph(x)
			}
		}
	}
}
//----------------------------------------------------------------------------------------------
public solid_damage(id)
{
	if(shModActive() && is_user_alive(id) && gHasSolidPower[id])
	{
		remove_task(id)
		stealthVisible(id)
	}
}
//----------------------------------------------------------------------------------------------
public giveSocom(id)
{
    if(!shModActive() || !is_user_alive(id) || !gHasSolidPower[id]) return

    shGiveWeapon(id, "weapon_usp")
}
//----------------------------------------------------------------------------------------------
public stealthInvisible(id)
{
	set_user_rendering(id, kRenderFxGlowShell, 0, 0, 0, kRenderTransAlpha, 20)
}
//----------------------------------------------------------------------------------------------
public stealthVisible(id)
{
	set_user_rendering(id)
}
//----------------------------------------------------------------------------------------------
public solid_morph(id)
{
	if(!gMorphed[id])
	{
		#if defined AMXX_VERSION
		cs_set_user_model(id, "solid")
		#else
		CS_SetModel(id, "solid")
		#endif

		gMorphed[id] = true
	}
}
//----------------------------------------------------------------------------------------------
public solid_unmorph(id)
{
	if(gMorphed[id])
	{

		#if defined AMXX_VERSION
		cs_reset_user_model(id)
		#else
		CS_ClearModel(id)
		#endif

		gMorphed[id] = false
	}
}
//----------------------------------------------------------------------------------------------
public solid_kd()
{

	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if(!is_user_alive(id) || !gHasSolidPower[id]) return

	if(Rations[id] == 0)
	{
		client_print(id, print_center, "You don't have rations")
		return
	}

	new newHealth = get_user_health(id) + healthRation

	if(newHealth > gMaxHealth[id]) newHealth = gMaxHealth[id]

	if(get_user_health(id) == gMaxHealth[id])
	{
		client_print(id, print_center, "You have enough health.")
	}
	else
	{
		set_user_health(id, newHealth)
		if(Rations[id] != -1)
		{
			Rations[id]--
			client_print(id, print_center, "You did use a ration. You have %d rations.", Rations[id])
		}
		else
		{
			client_print(id, print_center, "You did use a ration.", Rations[id])
		}
		emit_sound(id, CHAN_AUTO, "shmod/ration.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
	}

}
//----------------------------------------------------------------------------------------------
public client_connect(id)
{
	gHasSolidPower[id] = false
	gMorphed[id] = false
}
//----------------------------------------------------------------------------------------------