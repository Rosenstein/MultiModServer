// Cable - Laser Shots

/* CVARS - copy and paste to shconfig.cfg

//Cable
cable_level 12
cable_laser_ammo 500			//total # of shots given each round
cable_laser_burndecals 1		//Show the burn decals on the walls
cable_cooldown 0.02			//Cooldown timer between shots
cable_mulishot 0.02			//Delay for multishots on holding key down

*/

#include <amxmod>
#include <superheromod>

// Damage Variables
#define h1_dam 100 //head
#define h2_dam 60  //body
#define h3_dam 60  //stomach
#define h4_dam 65  //arm
#define h6_dam 65  //leg

// GLOBAL VARIABLES
new smoke, laser, laser_shots[SH_MAXSLOTS+1]
new bool:gHascablePower[SH_MAXSLOTS+1]
new gLastWeapon[SH_MAXSLOTS+1]
new gHeroName[]="Cable"
static const burn_decal[5] = {199,200,201,202,203}
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Cable","1.17.5","-=HeRo=- PhO ShiZzLe")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("cable_level", "12" )
	register_cvar("cable_laser_ammo", "500")  // total # of shots...
	register_cvar("cable_laser_burndecals", "1")
	register_cvar("cable_cooldown", "0.02" )
	register_cvar("cable_mulishot", "0.02" ) //Delay for multishots on holding key down

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(gHeroName, "Laser Gun", "Fire your laser gun!", true, "cable_level" )

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	register_event("ResetHUD","newRound","b")

	// KEY DOWN
	register_srvcmd("cable_kd", "cable_kd")
	shRegKeyDown(gHeroName, "cable_kd")
	register_srvcmd("cable_ku", "cable_ku")
	shRegKeyUp(gHeroName, "cable_ku")

	// INIT
	register_srvcmd("cable_init", "cable_init")
	shRegHeroInit(gHeroName, "cable_init")

	// DEATH
	register_event("DeathMsg", "cable_death", "a")
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	smoke = precache_model("sprites/steam1.spr")
	laser = precache_model("sprites/zerogxplode.spr")
	precache_sound("shmod/cable_laser.wav")
}
//----------------------------------------------------------------------------------------------
public cable_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	// 2nd Argument is 0 or 1 depending on whether the id has cable powers
	read_argv(2,temp,5)
	new hasPowers=str_to_num(temp)

	gHascablePower[id] = (hasPowers!=0)

	if (gHascablePower[id]) {
		gPlayerUltimateUsed[id] = false
		laser_shots[id] = get_cvar_num("cable_laser_ammo")
	}
}
//----------------------------------------------------------------------------------------------
public cable_death()
{
	new id = read_data(2)
	if ( id < 0 || id > SH_MAXSLOTS ) return
	remove_task(id+25735)
}
//----------------------------------------------------------------------------------------------
public newRound(id)
{
	laser_shots[id] = get_cvar_num("cable_laser_ammo")
	gPlayerUltimateUsed[id] = false

}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYDOWN
public cable_kd()
{
	if ( !hasRoundStarted() ) return PLUGIN_HANDLED

	// First Argument is an id with cable Powers!
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)
	if ( !is_user_alive(id) ) return PLUGIN_HANDLED

	if ( laser_shots[id] <= 0 ) {
		client_print(id,print_center,"No Laser Gun Bullets Left" )
		playSoundDenySelect(id)
		return PLUGIN_HANDLED
	}

	if ( gPlayerUltimateUsed[id] ) {
		playSoundDenySelect(id)
		return PLUGIN_HANDLED
	}

	// Remember this weapon...
	new clip,ammo,weaponID = get_user_weapon(id,clip,ammo)
	gLastWeapon[id] = weaponID

	fire_laser(id)  // 1 immediate shot
	if (get_cvar_float("cable_mulishot") > 0.0) {
		set_task( get_cvar_float("cable_mulishot"), "fire_laser_task", id+25735, "", 0, "b")  //delayed shots
	}

	return PLUGIN_HANDLED
}
//----------------------------------------------------------------------------------------------
public cable_ku()
{
	// First Argument is an id with cable's Powers!
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	remove_task(id+25735)

	// Use the ultimate
	ultimateTimer(id, get_cvar_float("cable_cooldown") )

}
//----------------------------------------------------------------------------------------------
public laserEffects(id, aimvec[3] )
{
	new origin[3]
	new decal_id = burn_decal[random_num(0,4)]
	emit_sound(id,CHAN_ITEM, "shmod/cable_laser.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)
	get_user_origin(id, origin, 1)

	// DELIGHT
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte( 27 )
	write_coord( origin[0] ) //pos
	write_coord( origin[1] )
	write_coord( origin[2] )
	write_byte( 10 )
	write_byte( 0 ) // r, g, b
	write_byte( 250 ) // r, g, b
	write_byte( 250 ) // r, g, b
	write_byte( 2 ) // life
	write_byte( 1 ) // decay
	message_end()

	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )     //TE_BEAMENTPOINTS 0
	write_coord(origin[0])
	write_coord(origin[1])
	write_coord(origin[2])
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short( laser )
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( 2 ) // life
	write_byte( 40 ) // width
	write_byte( 0 ) // noise
	write_byte( 100 ) // r, g, b
	write_byte( 250 ) // r, g, b
	write_byte( 250 ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()

	//Sparks
	message_begin( MSG_PVS, SVC_TEMPENTITY)
	write_byte( 9 )
	write_coord( aimvec[0] )
	write_coord( aimvec[1] )
	write_coord( aimvec[2] )
	message_end()

	//Smoke
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte( 5 ) // 5
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short( smoke )
	write_byte( 22 )  // 10
	write_byte( 10 )  // 10
	message_end()

	if(get_cvar_num("cable_laser_burndecals") == 1) {
		//TE_GUNSHOTDECAL
		message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
		write_byte( 109 ) // decal and ricochet sound
		write_coord( aimvec[0] ) //pos
		write_coord( aimvec[1] )
		write_coord( aimvec[2] )
		write_short (0) // I have no idea what thats supposed to be
		write_byte (decal_id) //decal
		message_end()
	}

}
//----------------------------------------------------------------------------------------------
public fire_laser_task(id) {
	id -= 25735
	fire_laser(id)
}
//----------------------------------------------------------------------------------------------
public fire_laser(id)
{
	new aimvec[3]
	new tid,tbody
	new FFOn = get_cvar_num("mp_friendlyfire")

	if( !is_user_alive(id) ) return PLUGIN_HANDLED

	if ( laser_shots[id] <= 0 ) {
		client_print(id,print_center,"No Laser Gun Bullets Left" )
		playSoundDenySelect(id)
		return PLUGIN_HANDLED
	}

	// Warn How many Blasts Left...
	laser_shots[id]--
	if(laser_shots[id] < 6) client_print(id,print_center,"Warning: %d Laser Gun Bullets Left", laser_shots[id] )

	get_user_origin(id,aimvec,3)
	laserEffects(id, aimvec)

	get_user_aiming(id,tid,tbody,9999)

	if( is_user_alive(tid) && ( FFOn || get_user_team(id) != get_user_team(tid) ) ) {
		emit_sound(tid,CHAN_BODY, "shmod/cable_laser.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)

		// Determine the damage
		new damage
		switch(tbody) {
			case 1: damage = h1_dam
			case 2: damage = h2_dam
			case 3: damage = h3_dam
			case 4: damage = h4_dam
			case 5: damage = h4_dam
			case 6: damage = h6_dam
			case 7: damage = h6_dam
		}

		// Deal the damage...
		shExtraDamage(tid, id, damage, "cable Laser")
	}
	return PLUGIN_CONTINUE
}
//----------------------------------------------------------------------------------------------
public client_disconnect(id)
{
	// stupid check but lets see
	if ( id <=0 || id > 32 ) return

	// Yeah don't want any left over residuals
	remove_task(id+25735)
	gHascablePower[id] = false
}
//----------------------------------------------------------------------------------------------

