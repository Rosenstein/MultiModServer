//DR. STRANGE! from Marvel Comics - Doctor Stephen Strange Sorcerer Supreme of the Earth dimension, aka Master of Mystical Arts.

/* CVARS - copy and paste to shconfig.cfg

//Dr. Strange
drstrange_level 9
drstrange_armor 200				//Default 200
drstrange_gravity 0.40			//Default 0.40
drstrange_pctperlev 0.02			//Percentage that factors into godmode randomness
drstrange_godsecs 1				//# of seconds of god mode
drstrange_respawnpct 50			//Percent chance 0-100 of respawning on each death (default 50)
drstrange_respawncooldown 0.0		//Ammount of time before next available respawn
drstrange_bolt_ammo 30			//Total # of shots each round, -1 is unlimited (default 30)
drstrange_bolt_burndecals 1		//Show the burn decals on the walls
drstrange_multishot	0.20			//Delay for multishots on holding key down, set to -1 for only 1 shot per keydown (Default 0.20)
drstrange_cooldown 0.0			//Cooldown timer between bolt power use

*/

/*
* v1.2 - vittu - 8/6/05
*      - Cleaned up code.
*      - Fixed all bugs with respawn, added percent chance to
*          respawn as an option. Left cooldown as optional.
*      - Fixed bolt cooldown to be used correctly.
*      - Fixed bolt ammo to only reset on new round, will not reset
*          if respawned.
*      - Added option for unlimited laser shots.
*      - Added option to turn multishot into a single shot per keydown.
*      - Changed sounds, look of bolt a bit, and made colors uniform.
*
*   Hero Created by Mr. Sparkle
*   Hero is a rip of Captain America, Cyclops, and Chucky with added AP/Gravity.
*/

#include <amxmod>
#include <Vexd_Utilities>
#include <superheromod>

// Damage Variables
#define h1_dam 120 //head
#define h2_dam 80  //body
#define h3_dam 80  //stomach
#define h4_dam 40  //arm
#define h6_dam 40  //leg

// GLOBAL VARIABLES
new gHeroName[]="Dr. Strange"
new bool:gHasDrStrangePowers[SH_MAXSLOTS+1]
new bool:gDrStrangeReviveUsed[SH_MAXSLOTS+1]
new bool:gUsingLaser[SH_MAXSLOTS+1]
new bool:gBetweenRounds
new gLaserShots[SH_MAXSLOTS+1]
new gLastWeapon[SH_MAXSLOTS+1]
new gPlayerLevels[SH_MAXSLOTS+1]
new gUserTeam[SH_MAXSLOTS+1]
new gSmokeSprite, gLaserSprite
static const burn_decal[3] = {28, 29, 30}
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Dr. Strange", "1.2", "Mr. Sparkle")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	register_cvar("drstrange_level", "9")
	register_cvar("drstrange_armor", "200")
	register_cvar("drstrange_gravity", "0.40")
	register_cvar("drstrange_pctperlev", "0.02")
	register_cvar("drstrange_godsecs", "1")
	register_cvar("drstrange_respawnpct", "50")
	register_cvar("drstrange_respawncooldown", "0.0")
	register_cvar("drstrange_bolt_ammo", "30")
	register_cvar("drstrange_bolt_burndecals", "1")
	register_cvar("drstrange_multishot", "0.20")
	register_cvar("drstrange_cooldown", "0.0")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	shCreateHero(gHeroName, "Mystical Arts", "Mystical Bolts, Mystical Armor, Cloak of Levitation, and Ressurection Stone.", true, "drstrange_level")

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// INIT
	register_srvcmd("drstrange_init", "drstrange_init")
	shRegHeroInit(gHeroName, "drstrange_init")

	// KEY DOWN
	register_srvcmd("drstrange_kd", "drstrange_kd")
	shRegKeyDown(gHeroName, "drstrange_kd")

	// KEY UP
	register_srvcmd("drstrange_ku", "drstrange_ku")
	shRegKeyUp(gHeroName, "drstrange_ku")

	// EVENTS
	register_event("ResetHUD", "newSpawn", "b")
	register_event("DeathMsg", "drstrange_death", "a")
	register_logevent("round_start", 2, "1=Round_Start")
	register_logevent("round_end", 2, "1=Round_End")
	register_logevent("round_end", 2, "1&Restart_Round_")

	// LEVELS
	register_srvcmd("drstrange_levels", "drstrange_levels")
	shRegLevels(gHeroName, "drstrange_levels")

	// OK Random Generator
	set_task(1.0, "drstrange_loop", 0, "", 0, "b")

	// Let Server know about Dr. Strange's Variables
	shSetMinGravity(gHeroName, "drstrange_gravity")
	shSetMaxArmor(gHeroName, "drstrange_armor")
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	gSmokeSprite = precache_model("sprites/steam1.spr")
	gLaserSprite = precache_model("sprites/lgtning.spr")
	precache_sound("debris/beamstart7.wav")
	precache_sound("weapons/xbow_hitbod2.wav")
	precache_sound("doors/aliendoor3.wav")
	precache_sound("ambience/port_suckin1.wav")
}
//----------------------------------------------------------------------------------------------
public drstrange_init()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	// 2nd Argument is 0 or 1 depending on whether the id has the hero
	read_argv(2,temp,5)
	new hasPowers = str_to_num(temp)

	if ( hasPowers ) {
		gPlayerUltimateUsed[id] = false
		gLaserShots[id] = get_cvar_num("drstrange_bolt_ammo")
		gUsingLaser[id] = false
	}
	//This gets run if they had the power but don't anymore
	else if ( gHasDrStrangePowers[id] ) {
		shRemSpeedPower(id)
		shRemGravityPower(id)
		shRemArmorPower(id)
	}

	//Sets this variable to the current status
	gHasDrStrangePowers[id] = (hasPowers!=0)
}
//----------------------------------------------------------------------------------------------
public newSpawn(id)
{
	if ( shModActive() && gHasDrStrangePowers[id] && is_user_alive(id) ) {
		remove_task(id)
		gPlayerUltimateUsed[id] = false
		gUsingLaser[id] = false
	}
}
//----------------------------------------------------------------------------------------------
public drstrange_levels()
{
	new id[5]
	new lev[5]

	read_argv(1,id,4)
	read_argv(2,lev,4)

	gPlayerLevels[str_to_num(id)] = str_to_num(lev)
}
//----------------------------------------------------------------------------------------------
public drstrange_loop()
{
	new players[32], count, id
	get_players(players, count, "ac")	//Alive non-bot players

	for ( new x = 0; x < count; x++ ) {
		id = players[x]
		if ( gHasDrStrangePowers[id] && is_user_alive(id) ) {
			new randNum = random_num(1, 100)
			new heroLevel = floatround(gPlayerLevels[id] * get_cvar_float("drstrange_pctperlev") * 100)
			//server_print("setting god mode: heroLevel=%d, randNum=%d", heroLevel, randNum)
			if ( heroLevel >= randNum && !get_user_godmode(id) ) {
				shSetGodMode(id, get_cvar_num("drstrange_godsecs"))
				setScreenFlash(id, 0, 240, 100, 10, 50 )  //Quick Screen Flash Letting You know about god mode
			}
		}
	}
}
//----------------------------------------------------------------------------------------------
// RESPOND TO KEYDOWN
public drstrange_kd()
{
	if ( !hasRoundStarted() ) return

	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	if ( !is_user_alive(id) || !gHasDrStrangePowers[id] ) return

	if ( gLaserShots[id] == 0 ) {
		client_print(id, print_center, "No Mystical Bolts Left")
		playSoundDenySelect(id)
		return
	}

	if ( gPlayerUltimateUsed[id] ) {
		playSoundDenySelect(id)
		return
	}

	// Remember this weapon...
	new clip, ammo, weaponID = get_user_weapon(id, clip, ammo)
	gLastWeapon[id] = weaponID

	// switch to knife
	engclient_cmd(id, "weapon_knife")

	gUsingLaser[id] = true

	fire_laser(id)  // 1 immediate shot
	if ( get_cvar_float("drstrange_multishot") >= 0.0 ) {
		set_task( get_cvar_float("drstrange_multishot"), "fire_laser", id, "", 0, "b")  //delayed shots
	}
}
//----------------------------------------------------------------------------------------------
public drstrange_ku()
{
	// First Argument is an id
	new temp[6]
	read_argv(1,temp,5)
	new id = str_to_num(temp)

	remove_task(id)

	if ( !hasRoundStarted() || !gUsingLaser[id] ) return

	// Use the ultimate
	if ( get_cvar_float("drstrange_cooldown") > 0.0 ) ultimateTimer(id, get_cvar_float("drstrange_cooldown"))

	gUsingLaser[id] = false

	// Switch back to previous weapon...
	if ( gLastWeapon[id] != CSW_KNIFE ) shSwitchWeaponID(id, gLastWeapon[id])
}
//----------------------------------------------------------------------------------------------
public fire_laser(id)
{
	new aimvec[3]
	new tid, tbody
	new FFOn = get_cvar_num("mp_friendlyfire")

	if ( !is_user_alive(id) ) return

	if ( gLaserShots[id] == 0 ) {
		client_print(id, print_center, "No Mystical Bolts Left")
		playSoundDenySelect(id)
		return
	}

	// Make sure still on knife
	new clip, ammo, weaponID = get_user_weapon(id, clip, ammo)
	if ( weaponID != CSW_KNIFE ) engclient_cmd(id, "weapon_knife")

	if ( gLaserShots[id] > -1 ) gLaserShots[id]--

	// Warn How many Blasts Left...
	if ( gLaserShots[id] < 6 && gLaserShots[id] >= 0 ) {
		client_print(id, print_center, "Warning: %d Mystical Bolts Left", gLaserShots[id])
	}

	get_user_origin(id, aimvec, 3)

	laserEffects(id, aimvec)

	get_user_aiming(id, tid, tbody)

	if ( is_user_alive(tid) && ( FFOn || get_user_team(id) != get_user_team(tid) ) ) {
		emit_sound(tid, CHAN_BODY, "weapons/xbow_hitbod2.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)

		// Determine the damage
		new damage
		switch(tbody) {
			case 1: damage = h1_dam
			case 2: damage = h2_dam
			case 3: damage = h3_dam
			case 4: damage = h4_dam
			case 5: damage = h4_dam
			case 6: damage = h6_dam
			case 7: damage = h6_dam
		}

		// Deal the damage...
		shExtraDamage(tid, id, damage, "Mystical Bolt")
	}
}
//----------------------------------------------------------------------------------------------
public laserEffects(id, aimvec[3])
{
	new origin[3]
	new decal_id = burn_decal[random_num(0,2)]
	emit_sound(id, CHAN_ITEM, "debris/beamstart7.wav", 0.6, ATTN_NORM, 0, PITCH_NORM)

	get_user_origin(id, origin)
	origin[2] += 8

	// DELIGHT
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(27)
	write_coord(origin[0])	//pos
	write_coord(origin[1])
	write_coord(origin[2])
	write_byte(10)
	write_byte(0)			// r, g, b
	write_byte(240)		// r, g, b
	write_byte(100)		// r, g, b
	write_byte(2)			// life
	write_byte(1)			// decay
	message_end()

	//BEAMENTPOINTS
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte (0)			//TE_BEAMENTPOINTS
	write_coord(origin[0])
	write_coord(origin[1])
	write_coord(origin[2])
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(gLaserSprite)
	write_byte(1)			// framestart
	write_byte(5)			// framerate
	write_byte(2)			// life
	write_byte(40)			// width
	write_byte(4)			// noise
	write_byte(0)			// Red
	write_byte(240)		// Green
	write_byte(100)		// Blue
	write_byte(200)		// brightness
	write_byte(200)		// speed
	message_end()

	//BEAMENTPOINTS
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte (0)			//TE_BEAMENTPOINTS
	write_coord(origin[0])
	write_coord(origin[1])
	write_coord(origin[2])
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(gLaserSprite)
	write_byte(1)			// framestart
	write_byte(5)			// framerate
	write_byte(2)			// life
	write_byte(20)			// width
	write_byte(12)			// noise
	write_byte(0)			// Red
	write_byte(240)		// Green
	write_byte(100)		// Blue
	write_byte(200)		// brightness
	write_byte(200)		// speed
	message_end()

	//Sparks
	message_begin(MSG_PVS, SVC_TEMPENTITY)
	write_byte(9)
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	message_end()

	//Smoke
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(5)
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(gSmokeSprite)
	write_byte(22)		// 10
	write_byte(10)		// 10
	message_end()

	if ( get_cvar_num("drstrange_bolt_burndecals") == 1 ) {
		// decal and ricochet sound
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		write_byte(109)		//TE_GUNSHOTDECAL
		write_coord(aimvec[0])	// pos
		write_coord(aimvec[1])
		write_coord(aimvec[2])
		write_short(0)			// I have no idea what thats supposed to be
		write_byte(decal_id)	// decal
		message_end()
	}
}
//----------------------------------------------------------------------------------------------
public drstrange_death()
{
	new id = read_data(2)

	if ( id <= 0 || id > SH_MAXSLOTS ) return

	remove_task(id)

	if ( gBetweenRounds ) return
	if ( !is_user_connected(id) || !gHasDrStrangePowers[id] ) return

	new randNum = random_num(0, 100)
	new pctChance = get_cvar_num("drstrange_respawnpct")
	if ( pctChance < randNum ) return

	gUserTeam[id] = get_user_team(id)

	// Look for self to raise from dead
	if ( !is_user_alive(id) && !gDrStrangeReviveUsed[id] ) {
		// Dr. Strange will raise self from dead
		new parm[1]
		parm[0] = id
		// Respawn him faster then Zues, let this power be used before Zues's
		// never set higher then 1.9 or lower then 0.5
		set_task(0.8, "drstrange_respawn", 0, parm, 1)
	}
}
//----------------------------------------------------------------------------------------------
public drstrange_respawn(parm[])
{
	new id = parm[0]

	if ( !is_user_connected(id) || is_user_alive(id) ) return
	if ( gDrStrangeReviveUsed[id] || gBetweenRounds ) return
	if ( gUserTeam[id] != get_user_team(id) ) return //prevents respawning spectators

	emit_sound(id, CHAN_STATIC, "ambience/port_suckin1.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)

	client_print(id, print_chat, "[SH](Dr. Strange) You used the Ressurection Stone to come back to life!")

	// Double spawn prevents the no HUD glitch
	user_spawn(id)
	user_spawn(id)

	// Respawned by Dr. Strange, it's ok to set cooldown now.
	new Float:drStrangeCooldown = get_cvar_float("drstrange_respawncooldown")
	if( drStrangeCooldown > 0.0 ){
		set_task(drStrangeCooldown, "enableDrStrange", 177+id)
		gDrStrangeReviveUsed[id] = true
	}

	emit_sound(id, CHAN_STATIC, "doors/aliendoor3.wav", 0.6, ATTN_NORM, 0, PITCH_LOW)

	shGlow(id, 0, 240, 100)
	set_task(3.0, "drstrange_unglow", 0, parm, 1)
	set_task(1.0, "drstrange_teamcheck", 0, parm, 1)
}
//----------------------------------------------------------------------------------------------
public drstrange_unglow(parm[])
{
	new id = parm[0]
	shUnglow(id)
}
//----------------------------------------------------------------------------------------------
public drstrange_teamcheck(parm[])
{
	new id = parm[0]

	if ( gUserTeam[id] != get_user_team(id) ) {
		client_print(id, print_chat, "[SH](Dr. Strange) You changed teams and used Ressurection Stone, now you shall die!")

		user_kill(id, 1)

		// Stop Dr. Strange from respawning until round ends
		remove_task(177+id)
		gDrStrangeReviveUsed[id] = true
	}
}
//----------------------------------------------------------------------------------------------
public enableDrStrange(id)
{
	id -= 177

	gDrStrangeReviveUsed[id] = false
}
//----------------------------------------------------------------------------------------------
public round_start()
{
	gBetweenRounds = false

	for ( new id = 1; id <= SH_MAXSLOTS; id++ ) {
		if ( gHasDrStrangePowers[id] ) {
			gLaserShots[id] = get_cvar_num("drstrange_bolt_ammo")
		}
	}
}
//----------------------------------------------------------------------------------------------
public round_end()
{
	if ( !shModActive() ) return

	gBetweenRounds = true

	// Reset the cooldown on round end, to start fresh for a new round
	for ( new id = 1; id <= SH_MAXSLOTS; id++ ) {
		if ( gHasDrStrangePowers[id] ) {
			remove_task(177+id)
			gDrStrangeReviveUsed[id] = false
		}
	}
}
//----------------------------------------------------------------------------------------------
public client_disconnect(id)
{
	// stupid check but lets see
	if ( id <= 0 || id > SH_MAXSLOTS ) return

	// Yeah don't want any left over residuals
	remove_task(id)

	gHasDrStrangePowers[id] = false
}
//----------------------------------------------------------------------------------------------
public client_connect(id)
{
	gHasDrStrangePowers[id] = false
}
//----------------------------------------------------------------------------------------------